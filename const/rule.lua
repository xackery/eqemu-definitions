---@meta

---@class Rule
Rule = {}
Rule["_IntRuleCount"] = 0
Rule["_RealRuleCount"] = 0
Rule["_BoolRuleCount"] = 0
Rule["MaxLevel"] = 0 --- Use `RuleI.Get(Rule.MaxLevel)`. Default 65, Sets the highest level for players that can be reached through experience.
Rule["PerCharacterQglobalMaxLevel"] = 0 --- Use `RuleB.Get(Rule.PerCharacterQglobalMaxLevel)`. Default 0, Check for qglobal 'CharMaxLevel' character qglobal (Type 5, \"\"), if player tries to level beyond that point, it will not go beyond that level.
Rule["PerCharacterBucketMaxLevel"] = 0 --- Use `RuleB.Get(Rule.PerCharacterBucketMaxLevel)`. Default false, Check for data bucket 'CharMaxLevel', if player tries to level beyond that point, it will not go beyond that level.
Rule["MaxExpLevel"] = 0 --- Use `RuleI.Get(Rule.MaxExpLevel)`. Default 0, Defines the maximum level that can be reached through experience.
Rule["DeathExpLossLevel"] = 0 --- Use `RuleI.Get(Rule.DeathExpLossLevel)`. Default 10, Any level equal to or greater than this will lose experience at death.
Rule["DeathExpLossMaxLevel"] = 0 --- Use `RuleI.Get(Rule.DeathExpLossMaxLevel)`. Default 255, Every higher level will no longer lose experience at death.
Rule["DeathItemLossLevel"] = 0 --- Use `RuleI.Get(Rule.DeathItemLossLevel)`. Default 10, From this level on, items are left in the corpse when LeaveCorpses is activated.
Rule["DeathExpLossMultiplier"] = 0 --- Use `RuleI.Get(Rule.DeathExpLossMultiplier)`. Default 3, Adjust how much experience is lost. Default 3.5% (0=0.5%, 1=1.5%, 2=2.5%, 3=3.5%, 4=4.5%, 5=5.5%, 6=6.5%, 7=7.5%, 8=8.5%, 9=9.5%, 10=11%).
Rule["DeathKeepLevel"] = 0 --- Use `RuleB.Get(Rule.DeathKeepLevel)`. Default false, Players can not drop below 0% experience from death..
Rule["UseDeathExpLossMult"] = 0 --- Use `RuleB.Get(Rule.UseDeathExpLossMult)`. Default false, Setting to control whether DeathExpLossMultiplier or the code default is used: (Level x Level / 18.0) x 12000.
Rule["UseOldRaceRezEffects"] = 0 --- Use `RuleB.Get(Rule.UseOldRaceRezEffects)`. Default false, Older clients had ID 757 for races with high starting STR, but it doesn't seem used anymore.
Rule["CorpseDecayTimeMS"] = 0 --- Use `RuleI.Get(Rule.CorpseDecayTimeMS)`. Default 10800000, Time after which the corpse decays (milliseconds).
Rule["CorpseResTimeMS"] = 0 --- Use `RuleI.Get(Rule.CorpseResTimeMS)`. Default 10800000, Time after which the corpse can no longer be resurrected (milliseconds).
Rule["LeaveCorpses"] = 0 --- Use `RuleB.Get(Rule.LeaveCorpses)`. Default true, Setting whether you leave a corpse behind.
Rule["LeaveNakedCorpses"] = 0 --- Use `RuleB.Get(Rule.LeaveNakedCorpses)`. Default false, Setting whether you leave a corpse without items.
Rule["MaxDraggedCorpses"] = 0 --- Use `RuleI.Get(Rule.MaxDraggedCorpses)`. Default 2, Maximum number of corpses you can drag at once.
Rule["DragCorpseDistance"] = 0 --- Use `RuleR.Get(Rule.DragCorpseDistance)`. Default 400,  "If a player is using /corpsedrag and moving, the corpse will not move until the player exceeds this distance").
Rule["FinalExpMultiplier"] = 0 --- Use `RuleR.Get(Rule.FinalExpMultiplier)`. Default 1,  "Added on top of everything else, easy for setting EXP events").
Rule["ExpMultiplier"] = 0 --- Use `RuleR.Get(Rule.ExpMultiplier)`. Default 0, 5, If greater than 0, the experience gained is multiplied by this value. .
Rule["AAExpMultiplier"] = 0 --- Use `RuleR.Get(Rule.AAExpMultiplier)`. Default 0, 5, If greater than 0, the AA experience gained is multiplied by this value. .
Rule["GroupExpMultiplier"] = 0 --- Use `RuleR.Get(Rule.GroupExpMultiplier)`. Default 0, 5, The experience in a group is multiplied by this value in addition to the group multiplier. The group multiplier is: 2 members=x 1.2, 3=x1.4, 4=x1.6, 5=x1.8, 6=x2.16.
Rule["RaidExpMultiplier"] = 0 --- Use `RuleR.Get(Rule.RaidExpMultiplier)`. Default 0, 2, The experience gained in raids is multiplied by (1-RaidExpMultiplier) .
Rule["UseXPConScaling"] = 0 --- Use `RuleB.Get(Rule.UseXPConScaling)`. Default true, When activated, the experience is modified depending on the difference between player level and NPC level. The values from the rules GreenModifier to RedModifier are used.
Rule["ShowExpValues"] = 0 --- Use `RuleI.Get(Rule.ShowExpValues)`. Default 0, Show experience values. 0=normal, 1=show raw experience values, 2=show raw experience values and percent.
Rule["GreenModifier"] = 0 --- Use `RuleI.Get(Rule.GreenModifier)`. Default 20, The experience obtained for green con mobs is multiplied by value/100.
Rule["LightBlueModifier"] = 0 --- Use `RuleI.Get(Rule.LightBlueModifier)`. Default 40, The experience obtained for light-blue con mobs is multiplied by value/100.
Rule["BlueModifier"] = 0 --- Use `RuleI.Get(Rule.BlueModifier)`. Default 90, The experience obtained for blue con mobs is multiplied by value/100.
Rule["WhiteModifier"] = 0 --- Use `RuleI.Get(Rule.WhiteModifier)`. Default 100, The experience obtained for white con mobs is multiplied by value/100.
Rule["YellowModifier"] = 0 --- Use `RuleI.Get(Rule.YellowModifier)`. Default 125, The experience obtained for yellow con mobs is multiplied by value/100.
Rule["RedModifier"] = 0 --- Use `RuleI.Get(Rule.RedModifier)`. Default 150, The experience obtained for red con mobs is multiplied by value/100.
Rule["AutosaveIntervalS"] = 0 --- Use `RuleI.Get(Rule.AutosaveIntervalS)`. Default 300, Number of seconds after which a timer is triggered which stores the character data. The value 0 means no periodic automatic saving..
Rule["HPRegenMultiplier"] = 0 --- Use `RuleI.Get(Rule.HPRegenMultiplier)`. Default 100, The hitpoint regeneration is multiplied by value/100 (up to the caps).
Rule["ManaRegenMultiplier"] = 0 --- Use `RuleI.Get(Rule.ManaRegenMultiplier)`. Default 100, The mana regeneration is multiplied by value/100 (up to the caps).
Rule["EnduranceRegenMultiplier"] = 0 --- Use `RuleI.Get(Rule.EnduranceRegenMultiplier)`. Default 100, The endurance regeneration is multiplied by value/100 (up to the caps).
Rule["OldMinMana"] = 0 --- Use `RuleB.Get(Rule.OldMinMana)`. Default false, This is used for servers that want to follow older skill cap formulas so they can still have some regen w/o mediate.
Rule["HealOnLevel"] = 0 --- Use `RuleB.Get(Rule.HealOnLevel)`. Default false, Setting whether a player should heal completely when leveling.
Rule["FeignKillsPet"] = 0 --- Use `RuleB.Get(Rule.FeignKillsPet)`. Default false, Setting whether Feign Death kills the player pet.
Rule["ItemManaRegenCap"] = 0 --- Use `RuleI.Get(Rule.ItemManaRegenCap)`. Default 15, Limit on mana regeneration granted by items.
Rule["ItemHealthRegenCap"] = 0 --- Use `RuleI.Get(Rule.ItemHealthRegenCap)`. Default 30, Limit on health regeneration granted by items.
Rule["ItemDamageShieldCap"] = 0 --- Use `RuleI.Get(Rule.ItemDamageShieldCap)`. Default 30, Limit on damage shields granted by items.
Rule["ItemAccuracyCap"] = 0 --- Use `RuleI.Get(Rule.ItemAccuracyCap)`. Default 150, Limit on accuracy granted by items.
Rule["ItemAvoidanceCap"] = 0 --- Use `RuleI.Get(Rule.ItemAvoidanceCap)`. Default 100, Limit on avoidance granted by items.
Rule["ItemCombatEffectsCap"] = 0 --- Use `RuleI.Get(Rule.ItemCombatEffectsCap)`. Default 100, Limit on combat effects granted by items.
Rule["ItemShieldingCap"] = 0 --- Use `RuleI.Get(Rule.ItemShieldingCap)`. Default 35, Limit on shielding granted by items.
Rule["ItemSpellShieldingCap"] = 0 --- Use `RuleI.Get(Rule.ItemSpellShieldingCap)`. Default 35, Limit on spell shielding granted by items.
Rule["ItemDoTShieldingCap"] = 0 --- Use `RuleI.Get(Rule.ItemDoTShieldingCap)`. Default 35, Limit on DoT shielding granted by items.
Rule["ItemStunResistCap"] = 0 --- Use `RuleI.Get(Rule.ItemStunResistCap)`. Default 35, Limit on resistance granted by items.
Rule["ItemStrikethroughCap"] = 0 --- Use `RuleI.Get(Rule.ItemStrikethroughCap)`. Default 35, Limit on strikethrough granted by items.
Rule["ItemATKCap"] = 0 --- Use `RuleI.Get(Rule.ItemATKCap)`. Default 250, Limit on ATK granted by items.
Rule["ItemHealAmtCap"] = 0 --- Use `RuleI.Get(Rule.ItemHealAmtCap)`. Default 250, Limit on heal amount granted by items.
Rule["ItemSpellDmgCap"] = 0 --- Use `RuleI.Get(Rule.ItemSpellDmgCap)`. Default 250, Limit on spell damage granted by items.
Rule["ItemClairvoyanceCap"] = 0 --- Use `RuleI.Get(Rule.ItemClairvoyanceCap)`. Default 250, Limit on clairvoyance granted by items.
Rule["ItemDSMitigationCap"] = 0 --- Use `RuleI.Get(Rule.ItemDSMitigationCap)`. Default 50, Limit on damageshield mitigation granted by items.
Rule["ItemEnduranceRegenCap"] = 0 --- Use `RuleI.Get(Rule.ItemEnduranceRegenCap)`. Default 15, Limit on endurance regeneration granted by items.
Rule["ItemExtraDmgCap"] = 0 --- Use `RuleI.Get(Rule.ItemExtraDmgCap)`. Default 150, Cap for bonuses to melee skills like Bash, Frenzy, etc..
Rule["HasteCap"] = 0 --- Use `RuleI.Get(Rule.HasteCap)`. Default 100, Haste cap for non-v3(over haste) haste.
Rule["Hastev3Cap"] = 0 --- Use `RuleI.Get(Rule.Hastev3Cap)`. Default 25, Haste cap for v3(over haste) haste.
Rule["SkillUpModifier"] = 0 --- Use `RuleI.Get(Rule.SkillUpModifier)`. Default 100, The probability for a skill-up is multiplied by value/100.
Rule["SharedBankPlat"] = 0 --- Use `RuleB.Get(Rule.SharedBankPlat)`. Default false, Shared bank platinum. Off by default to prevent duplication.
Rule["BindAnywhere"] = 0 --- Use `RuleB.Get(Rule.BindAnywhere)`. Default false, Allows players to bind their soul anywhere in the world.
Rule["RestRegenEnabled"] = 0 --- Use `RuleB.Get(Rule.RestRegenEnabled)`. Default true, Setting to activate out-of-combat regeneration.
Rule["RestRegenTimeToActivate"] = 0 --- Use `RuleI.Get(Rule.RestRegenTimeToActivate)`. Default 30, Time in seconds for rest state regen to kick in.
Rule["RestRegenRaidTimeToActivate"] = 0 --- Use `RuleI.Get(Rule.RestRegenRaidTimeToActivate)`. Default 300, Time in seconds for rest state regen to kick in with a raid target.
Rule["KillsPerGroupLeadershipAA"] = 0 --- Use `RuleI.Get(Rule.KillsPerGroupLeadershipAA)`. Default 250, Minimum number of dark blue mobs that must be killed to get a Group Leadership AA.
Rule["KillsPerRaidLeadershipAA"] = 0 --- Use `RuleI.Get(Rule.KillsPerRaidLeadershipAA)`. Default 250, Minimum number of dark blue mobs that must be killed to get a Raid Leadership AAA.
Rule["MaxFearDurationForPlayerCharacter"] = 0 --- Use `RuleI.Get(Rule.MaxFearDurationForPlayerCharacter)`. Default 4, Maximum number of tics a player can be feared. 1 tic equls 6 seconds.
Rule["MaxCharmDurationForPlayerCharacter"] = 0 --- Use `RuleI.Get(Rule.MaxCharmDurationForPlayerCharacter)`. Default 15, Maximum number of tics a player can be charmed. 1 tic equls 6 seconds.
Rule["BaseHPRegenBonusRaces"] = 0 --- Use `RuleI.Get(Rule.BaseHPRegenBonusRaces)`. Default 4352, A bitmask of race(s) that receive the regen bonus. Iksar (4096) & Troll (256) = 4352. See common/races.h for the bitmask values.
Rule["SoDClientUseSoDHPManaEnd"] = 0 --- Use `RuleB.Get(Rule.SoDClientUseSoDHPManaEnd)`. Default false, Setting this to true will allow SoD clients to use the SoD HP/Mana/End formulas and previous clients will use the old formulas.
Rule["UseRaceClassExpBonuses"] = 0 --- Use `RuleB.Get(Rule.UseRaceClassExpBonuses)`. Default true, Setting this to true will enable Class and Racial experience rate bonuses.
Rule["UseOldRaceExpPenalties"] = 0 --- Use `RuleB.Get(Rule.UseOldRaceExpPenalties)`. Default false, Setting this to true will enable racial experience penalties for Iksar, Troll, Ogre, and Barbarian, as well as the bonus for Halflings.
Rule["UseOldClassExpPenalties"] = 0 --- Use `RuleB.Get(Rule.UseOldClassExpPenalties)`. Default false, Setting this to true will enable old class experience penalties for Paladin, SK, Ranger, Bard, Monk, Wizard, Enchanter, Magician, and Necromancer, as well as the bonus for Rogues and Warriors.
Rule["RespawnFromHover"] = 0 --- Use `RuleB.Get(Rule.RespawnFromHover)`. Default false, Setting whether the respawn window should be used.
Rule["RespawnFromHoverTimer"] = 0 --- Use `RuleI.Get(Rule.RespawnFromHoverTimer)`. Default 300, Respawn Window countdown timer, in seconds.
Rule["UseNewStatsWindow"] = 0 --- Use `RuleB.Get(Rule.UseNewStatsWindow)`. Default true, Setting whether the new Stats window, which displays all information, should be used.
Rule["ItemCastsUseFocus"] = 0 --- Use `RuleB.Get(Rule.ItemCastsUseFocus)`. Default false, If true, this allows item clickies to use focuses that have limited maximum levels on them.
Rule["MinStatusForNoDropExemptions"] = 0 --- Use `RuleI.Get(Rule.MinStatusForNoDropExemptions)`. Default 80, This allows status x and higher to trade no drop items.
Rule["SkillCapMaxLevel"] = 0 --- Use `RuleI.Get(Rule.SkillCapMaxLevel)`. Default 75, Sets the Maximum Level used for Skill Caps (from skill_caps table). -1 makes it use MaxLevel rule value. It is set to 75 because PEQ only has skill caps up to that level, and grabbing the players' skill past 75 will return 0, breaking all skills past that level. This helps servers with obsurd level caps (75+ level cap) function without any modifications.
Rule["StatCap"] = 0 --- Use `RuleI.Get(Rule.StatCap)`. Default 0, If StatCap > 0 then this value is used. If it is 0, the value of the following code is used: If Level < 61: 255. If Level >= 61 and the client SoF or newer: 255 + 5 x (level -60).  If the client is older than SoF and the level < 71 then: 255 + x (level-60). In all other cases: 330..
Rule["CheckCursorEmptyWhenLooting"] = 0 --- Use `RuleB.Get(Rule.CheckCursorEmptyWhenLooting)`. Default true, If true, a player cannot loot a corpse (player or NPC) with an item on their cursor.
Rule["MaintainIntoxicationAcrossZones"] = 0 --- Use `RuleB.Get(Rule.MaintainIntoxicationAcrossZones)`. Default true, If true, alcohol effects are maintained across zoning and logging out/in.
Rule["EnableDiscoveredItems"] = 0 --- Use `RuleB.Get(Rule.EnableDiscoveredItems)`. Default true, If enabled, it enables EVENT_DISCOVER_ITEM and also saves character names and timestamps for the first time an item is discovered.
Rule["EnableXTargetting"] = 0 --- Use `RuleB.Get(Rule.EnableXTargetting)`. Default true, Enable Extended Targeting Window, for users with UF and later clients.
Rule["EnableAggroMeter"] = 0 --- Use `RuleB.Get(Rule.EnableAggroMeter)`. Default true, Enable Aggro Meter, for users with RoF and later clients.
Rule["KeepLevelOverMax"] = 0 --- Use `RuleB.Get(Rule.KeepLevelOverMax)`. Default false, Don't de-level a character that has somehow gone over the level cap.
Rule["FoodLossPerUpdate"] = 0 --- Use `RuleI.Get(Rule.FoodLossPerUpdate)`. Default 32, How much food/water you lose per stamina update.
Rule["EnableHungerPenalties"] = 0 --- Use `RuleB.Get(Rule.EnableHungerPenalties)`. Default false, Being hungry/thirsty has negative effects -- it does appear normal live servers do not have penalties.
Rule["EnableFoodRequirement"] = 0 --- Use `RuleB.Get(Rule.EnableFoodRequirement)`. Default true, If disabled, food is no longer required.
Rule["BaseInstrumentSoftCap"] = 0 --- Use `RuleI.Get(Rule.BaseInstrumentSoftCap)`. Default 36, Softcap for instrument mods, 36 commonly referred to as 3.6 as well.
Rule["UseSpellFileSongCap"] = 0 --- Use `RuleB.Get(Rule.UseSpellFileSongCap)`. Default true, When they removed the AA that increased the cap they removed the above and just use the spell field.
Rule["BaseRunSpeedCap"] = 0 --- Use `RuleI.Get(Rule.BaseRunSpeedCap)`. Default 158, Base Run Speed Cap, on live it's 158% which will give you a runspeed of 1.580 hard capped to 225.
Rule["OrnamentationAugmentType"] = 0 --- Use `RuleI.Get(Rule.OrnamentationAugmentType)`. Default 20, Ornamentation Augment Type.
Rule["EnvironmentDamageMulipliter"] = 0 --- Use `RuleR.Get(Rule.EnvironmentDamageMulipliter)`. Default 1,  "Multiplier for environmental damage like fall damage.").
Rule["UnmemSpellsOnDeath"] = 0 --- Use `RuleB.Get(Rule.UnmemSpellsOnDeath)`. Default true, Setting whether at death all memorized Spells are forgotten.
Rule["TradeskillUpAlchemy"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpAlchemy)`. Default 2, 0, Alchemy skillup rate adjustment. Lower is faster.
Rule["TradeskillUpBaking"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpBaking)`. Default 2, 0, Baking skillup rate adjustment. Lower is faster.
Rule["TradeskillUpBlacksmithing"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpBlacksmithing)`. Default 2, 0, Blacksmithing skillup rate adjustment. Lower is faster.
Rule["TradeskillUpBrewing"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpBrewing)`. Default 3, 0, Brewing skillup rate adjustment. Lower is faster.
Rule["TradeskillUpFletching"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpFletching)`. Default 2, 0, Fletching skillup rate adjustment. Lower is faster.
Rule["TradeskillUpJewelcrafting"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpJewelcrafting)`. Default 2, 0, Jewelcrafting skillup rate adjustment. Lower is faster.
Rule["TradeskillUpMakePoison"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpMakePoison)`. Default 2, 0, Make Poison skillup rate adjustment. Lower is faster.
Rule["TradeskillUpPottery"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpPottery)`. Default 4, 0, Pottery skillup rate adjustment. Lower is faster.
Rule["TradeskillUpResearch"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpResearch)`. Default 1, 0, Research skillup rate adjustment. Lower is faster.
Rule["TradeskillUpTinkering"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpTinkering)`. Default 2, 0, Tinkering skillup rate adjustment. Lower is faster.
Rule["TradeskillUpTailoring"] = 0 --- Use `RuleR.Get(Rule.TradeskillUpTailoring)`. Default 2, 0, Tailoring skillup rate adjustment. Lower is faster.
Rule["MarqueeHPUpdates"] = 0 --- Use `RuleB.Get(Rule.MarqueeHPUpdates)`. Default false, Will show health percentage in center of screen if health lesser than 100%.
Rule["IksarCommonTongue"] = 0 --- Use `RuleI.Get(Rule.IksarCommonTongue)`. Default 95, Starting value for Common Tongue for Iksars.
Rule["OgreCommonTongue"] = 0 --- Use `RuleI.Get(Rule.OgreCommonTongue)`. Default 95, Starting value for Common Tongue for Ogres.
Rule["TrollCommonTongue"] = 0 --- Use `RuleI.Get(Rule.TrollCommonTongue)`. Default 95, Starting value for Common Tongue for Trolls.
Rule["ActiveInvSnapshots"] = 0 --- Use `RuleB.Get(Rule.ActiveInvSnapshots)`. Default false, Takes a periodic snapshot of inventory contents from online players.
Rule["InvSnapshotMinIntervalM"] = 0 --- Use `RuleI.Get(Rule.InvSnapshotMinIntervalM)`. Default 180, Minimum time between inventory snapshots (minutes).
Rule["InvSnapshotMinRetryM"] = 0 --- Use `RuleI.Get(Rule.InvSnapshotMinRetryM)`. Default 30, Time to re-attempt an inventory snapshot after a failure  (minutes).
Rule["InvSnapshotHistoryD"] = 0 --- Use `RuleI.Get(Rule.InvSnapshotHistoryD)`. Default 30, Time to keep snapshot entries (days).
Rule["RestrictSpellScribing"] = 0 --- Use `RuleB.Get(Rule.RestrictSpellScribing)`. Default false, Setting whether to restrict spell scribing to allowable races/classes of spell scroll.
Rule["UseStackablePickPocketing"] = 0 --- Use `RuleB.Get(Rule.UseStackablePickPocketing)`. Default true, Allows stackable pickpocketed items to stack instead of only being allowed in empty inventory slots.
Rule["AllowMQTarget"] = 0 --- Use `RuleB.Get(Rule.AllowMQTarget)`. Default false, Disables putting players in the 'hackers' list for targeting beyond the clip plane or attempting to target something untargetable.
Rule["UseOldBindWound"] = 0 --- Use `RuleB.Get(Rule.UseOldBindWound)`. Default false, Uses the original bind wound behavior.
Rule["GrantHoTTOnCreate"] = 0 --- Use `RuleB.Get(Rule.GrantHoTTOnCreate)`. Default false, Grant Health of Target's Target leadership AA on character creation.
Rule["UseOldConSystem"] = 0 --- Use `RuleB.Get(Rule.UseOldConSystem)`. Default false, Setting whether the pre SoF era consider system should be used.
Rule["OPClientUpdateVisualDebug"] = 0 --- Use `RuleB.Get(Rule.OPClientUpdateVisualDebug)`. Default false, Shows a pulse and forward directional particle each time the client sends its position to server.
Rule["AllowCrossClassTrainers"] = 0 --- Use `RuleB.Get(Rule.AllowCrossClassTrainers)`. Default false, If the value is true, a player can also train with other class Guildmasters..
Rule["PetsUseReagents"] = 0 --- Use `RuleB.Get(Rule.PetsUseReagents)`. Default true, Conjuring pets consumes reagents.
Rule["DismountWater"] = 0 --- Use `RuleB.Get(Rule.DismountWater)`. Default true, Dismount horses when entering water.
Rule["NoSkillsOnHorse"] = 0 --- Use `RuleB.Get(Rule.NoSkillsOnHorse)`. Default false, Enabling this will prevent Bind Wound and Foraging while on a mount.
Rule["UseNoJunkFishing"] = 0 --- Use `RuleB.Get(Rule.UseNoJunkFishing)`. Default false, Disregards junk items when fishing.
Rule["SoftDeletes"] = 0 --- Use `RuleB.Get(Rule.SoftDeletes)`. Default true, When characters are deleted in character select, they are only soft deleted.
Rule["DefaultGuild"] = 0 --- Use `RuleI.Get(Rule.DefaultGuild)`. Default 0, If not 0, new characters placed into the guild # indicated.
Rule["ProcessFearedProximity"] = 0 --- Use `RuleB.Get(Rule.ProcessFearedProximity)`. Default false, Processes proximity checks when feared.
Rule["EnableCharacterEXPMods"] = 0 --- Use `RuleB.Get(Rule.EnableCharacterEXPMods)`. Default false, Enables character zone-based experience modifiers..
Rule["PVPEnableGuardFactionAssist"] = 0 --- Use `RuleB.Get(Rule.PVPEnableGuardFactionAssist)`. Default true, Enables faction based assisting against the aggresor in pvp..
Rule["SkillUpFromItems"] = 0 --- Use `RuleB.Get(Rule.SkillUpFromItems)`. Default true, Allow Skill ups from clickable items.
Rule["EnableTestBuff"] = 0 --- Use `RuleB.Get(Rule.EnableTestBuff)`. Default false, Allow the use of /testbuff.
Rule["UseResurrectionSickness"] = 0 --- Use `RuleB.Get(Rule.UseResurrectionSickness)`. Default true, Use Resurrection Sickness based on Resurrection spell cast, set to false to disable Resurrection Sickness..
Rule["OldResurrectionSicknessSpellID"] = 0 --- Use `RuleI.Get(Rule.OldResurrectionSicknessSpellID)`. Default 757, 757 is Default Old Resurrection Sickness Spell ID.
Rule["ResurrectionSicknessSpellID"] = 0 --- Use `RuleI.Get(Rule.ResurrectionSicknessSpellID)`. Default 756, 756 is Default Resurrection Sickness Spell ID.
Rule["EnableBardMelody"] = 0 --- Use `RuleB.Get(Rule.EnableBardMelody)`. Default true, Enable Bard /melody by default, to disable change to false for a classic experience..
Rule["EnableRangerAutoFire"] = 0 --- Use `RuleB.Get(Rule.EnableRangerAutoFire)`. Default true, Enable Ranger /autofire by default, to disable change to false for a classic experience..
Rule["EnableTGB"] = 0 --- Use `RuleB.Get(Rule.EnableTGB)`. Default true, Enable /tgb (Target Group Buff) by default, to disable change to false for a classic experience..
Rule["SkillUpMaximumChancePercentage"] = 0 --- Use `RuleI.Get(Rule.SkillUpMaximumChancePercentage)`. Default 25, Maximum chance to improve a combat skill, before skill-specific modifiers.  This should be greater than SkillUpMinimumChancePercentage..
Rule["SkillUpMinimumChancePercentage"] = 0 --- Use `RuleI.Get(Rule.SkillUpMinimumChancePercentage)`. Default 2, Minimum chance to improve a combat skill, after skill-specific modifiers.  This should be lesser than SkillUpMaximumChancePercentage..
Rule["WarriorTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.WarriorTrackingDistanceMultiplier)`. Default 0, If you want warriors to be able to track, increase this above 0.  0 disables tracking packets..
Rule["ClericTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.ClericTrackingDistanceMultiplier)`. Default 0, If you want clerics to be able to track, increase this above 0.  0 disables tracking packets..
Rule["PaladinTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.PaladinTrackingDistanceMultiplier)`. Default 0, If you want paladins to be able to track, increase this above 0.  0 disables tracking packets..
Rule["RangerTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.RangerTrackingDistanceMultiplier)`. Default 12, If you want rangers to be able to track, increase this above 0.  0 disables tracking packets..
Rule["ShadowKnightTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.ShadowKnightTrackingDistanceMultiplier)`. Default 0, If you want shadow knights to be able to track, increase this above 0.  0 disables tracking packets..
Rule["DruidTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.DruidTrackingDistanceMultiplier)`. Default 10, If you want druids to be able to track, increase this above 0.  0 disables tracking packets..
Rule["MonkTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.MonkTrackingDistanceMultiplier)`. Default 0, If you want monks to be able to track, increase this above 0.  0 disables tracking packets..
Rule["BardTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.BardTrackingDistanceMultiplier)`. Default 7, If you want bards to be able to track, increase this above 0.  0 disables tracking packets..
Rule["RogueTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.RogueTrackingDistanceMultiplier)`. Default 0, If you want rogues to be able to track, increase this above 0.  0 disables tracking packets..
Rule["ShamanTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.ShamanTrackingDistanceMultiplier)`. Default 0, If you want shaman to be able to track, increase this above 0.  0 disables tracking packets..
Rule["NecromancerTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.NecromancerTrackingDistanceMultiplier)`. Default 0, If you want necromancers to be able to track, increase this above 0.  0 disables tracking packets..
Rule["WizardTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.WizardTrackingDistanceMultiplier)`. Default 0, If you want wizards to be able to track, increase this above 0.  0 disables tracking packets..
Rule["MagicianTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.MagicianTrackingDistanceMultiplier)`. Default 0, If you want magicians to be able to track, increase this above 0.  0 disables tracking packets..
Rule["EnchanterTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.EnchanterTrackingDistanceMultiplier)`. Default 0, If you want enchanters to be able to track, increase this above 0.  0 disables tracking packets..
Rule["BeastlordTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.BeastlordTrackingDistanceMultiplier)`. Default 0, If you want beastlords to be able to track, increase this above 0.  0 disables tracking packets..
Rule["BerserkerTrackingDistanceMultiplier"] = 0 --- Use `RuleI.Get(Rule.BerserkerTrackingDistanceMultiplier)`. Default 0, If you want berserkers to be able to track, increase this above 0.  0 disables tracking packets..
Rule["OnInviteReceiveAlreadyinGroupMessage"] = 0 --- Use `RuleB.Get(Rule.OnInviteReceiveAlreadyinGroupMessage)`. Default true, If you want clients to receive a message when trying to invite a player into a group that is currently in another group..
Rule["PetZoneWithOwner"] = 0 --- Use `RuleB.Get(Rule.PetZoneWithOwner)`. Default true, Should Pets Zone with Owner.
Rule["FullManaOnDeath"] = 0 --- Use `RuleB.Get(Rule.FullManaOnDeath)`. Default true, On death set mana to full.
Rule["FullEndurOnDeath"] = 0 --- Use `RuleB.Get(Rule.FullEndurOnDeath)`. Default true, On death set endurance to full.
Rule["ExperiencePercentCapPerKill"] = -0 --- Use `RuleI.Get(Rule.ExperiencePercentCapPerKill)`. Default 1, Caps the percentage of experience that can be gained per kill. -1 disables the cap; 0 blocks all (non-aa) xp..
Rule["EnableGroupEXPModifier"] = 0 --- Use `RuleB.Get(Rule.EnableGroupEXPModifier)`. Default true, Enable or disable the group experience modifier based on number of players in group, default is true.
Rule["GroupMemberEXPModifier"] = 0 --- Use `RuleR.Get(Rule.GroupMemberEXPModifier)`. Default 0, 2, Sets the group experience modifier per members between 2 and 5, default is 0.2.
Rule["FullGroupEXPModifier"] = 0 --- Use `RuleR.Get(Rule.FullGroupEXPModifier)`. Default 2, 16, Sets the group experience modifier for a full group, default is 2.16.
Rule["SuspendIntervalMS"] = 0 --- Use `RuleI.Get(Rule.SuspendIntervalMS)`. Default 10000, Time interval for merc suspend (milliseconds).
Rule["UpkeepIntervalMS"] = 0 --- Use `RuleI.Get(Rule.UpkeepIntervalMS)`. Default 180000, Time interval for merc upkeep (milliseconds).
Rule["SuspendIntervalS"] = 0 --- Use `RuleI.Get(Rule.SuspendIntervalS)`. Default 10, Time interval for merc suspend command (seconds).
Rule["AllowMercs"] = 0 --- Use `RuleB.Get(Rule.AllowMercs)`. Default false, Allow the use of mercs.
Rule["ChargeMercPurchaseCost"] = 0 --- Use `RuleB.Get(Rule.ChargeMercPurchaseCost)`. Default false, Turns Mercenary purchase costs on or off.
Rule["ChargeMercUpkeepCost"] = 0 --- Use `RuleB.Get(Rule.ChargeMercUpkeepCost)`. Default false, Turns Mercenary upkeep costs on or off.
Rule["AggroRadius"] = 0 --- Use `RuleI.Get(Rule.AggroRadius)`. Default 100, Determines the distance from which a merc will aggro group member's target(also used to determine the distance at which a healer merc will begin healing a group member).
Rule["AggroRadiusPuller"] = 0 --- Use `RuleI.Get(Rule.AggroRadiusPuller)`. Default 25, Determines the distance from which a merc will aggro group member's target, if they have the group role of puller (also used to determine the distance at which a healer merc will begin healing a group member, if they have the group role of puller).
Rule["ResurrectRadius"] = 0 --- Use `RuleI.Get(Rule.ResurrectRadius)`. Default 50, Determines the distance from which a healer merc will attempt to resurrect a group member's corpse.
Rule["ScaleRate"] = 0 --- Use `RuleI.Get(Rule.ScaleRate)`. Default 100, Merc scale factor.
Rule["AllowMercSuspendInCombat"] = 0 --- Use `RuleB.Get(Rule.AllowMercSuspendInCombat)`. Default true, Allow merc suspend in combat.
Rule["PlayerCreationAllowed"] = 0 --- Use `RuleB.Get(Rule.PlayerCreationAllowed)`. Default false, Allow players to create a guild using the window in Underfoot+.
Rule["PlayerCreationLimit"] = 0 --- Use `RuleI.Get(Rule.PlayerCreationLimit)`. Default 1, Only allow use of the UF+ window if the account has < than this number of guild leaders on it.
Rule["PlayerCreationRequiredStatus"] = 0 --- Use `RuleI.Get(Rule.PlayerCreationRequiredStatus)`. Default 0, Required status to create a guild.
Rule["PlayerCreationRequiredLevel"] = 0 --- Use `RuleI.Get(Rule.PlayerCreationRequiredLevel)`. Default 0, Required level of the player attempting to create the guild.
Rule["PlayerCreationRequiredTime"] = 0 --- Use `RuleI.Get(Rule.PlayerCreationRequiredTime)`. Default 0, Time needed online on the account to create a guild (in minutes).
Rule["MaxTrainTradeskills"] = 0 --- Use `RuleI.Get(Rule.MaxTrainTradeskills)`. Default 21, Highest level for trading skills that can be learnt by the trainer.
Rule["UseLimitTradeskillSearchSkillDiff"] = 0 --- Use `RuleB.Get(Rule.UseLimitTradeskillSearchSkillDiff)`. Default true, Enables the limit for the maximum difference between trivial and skill for recipe searches and favorites.
Rule["MaxTradeskillSearchSkillDiff"] = 0 --- Use `RuleI.Get(Rule.MaxTradeskillSearchSkillDiff)`. Default 50, The maximum difference in skill between the trivial of an item and the skill of the player if the trivial is higher than the skill. Recipes that have not been learnt or made at least once via the Experiment mode will be removed from searches based on this criteria..
Rule["MaxTrainSpecializations"] = 0 --- Use `RuleI.Get(Rule.MaxTrainSpecializations)`. Default 50, Maximum level a GM trainer will train casting specializations.
Rule["SwimmingStartValue"] = 0 --- Use `RuleI.Get(Rule.SwimmingStartValue)`. Default 100, Start value of swimming skill.
Rule["TrainSenseHeading"] = 0 --- Use `RuleB.Get(Rule.TrainSenseHeading)`. Default false, Switch whether SenseHeading is trained by use.
Rule["SenseHeadingStartValue"] = 0 --- Use `RuleI.Get(Rule.SenseHeadingStartValue)`. Default 200, Start value of sense heading skill.
Rule["SelfLanguageLearning"] = 0 --- Use `RuleB.Get(Rule.SelfLanguageLearning)`. Default true, Enabling self-learning of languages.
Rule["RequireTomeHandin"] = 0 --- Use `RuleB.Get(Rule.RequireTomeHandin)`. Default false, Disable click-to-learn and force hand in to Guild Master.
Rule["AttackCommandRange"] = 0 --- Use `RuleR.Get(Rule.AttackCommandRange)`. Default 150,  "Range at which a pet will respond to attack commands").
Rule["UnTargetableSwarmPet"] = 0 --- Use `RuleB.Get(Rule.UnTargetableSwarmPet)`. Default false, Setting whether swarm pets should be targetable.
Rule["PetPowerLevelCap"] = 0 --- Use `RuleR.Get(Rule.PetPowerLevelCap)`. Default 10,  "Maximum number of levels a player pet can go up with pet power").
Rule["CanTakeNoDrop"] = 0 --- Use `RuleB.Get(Rule.CanTakeNoDrop)`. Default false, Setting whether anyone can give no-drop items to pets.
Rule["LivelikeBreakCharmOnInvis"] = 0 --- Use `RuleB.Get(Rule.LivelikeBreakCharmOnInvis)`. Default true, Default: true will break charm on any type of invis (hide/ivu/iva/etc) false will only break if the pet can not see you (ex. you have an undead pet and cast IVU.
Rule["MinStatusToSummonItem"] = 0 --- Use `RuleI.Get(Rule.MinStatusToSummonItem)`. Default 250, Minimum required status to summon items.
Rule["MinStatusToZoneAnywhere"] = 0 --- Use `RuleI.Get(Rule.MinStatusToZoneAnywhere)`. Default 250, Minimum required status to zone anywhere.
Rule["MinStatusToLevelTarget"] = 0 --- Use `RuleI.Get(Rule.MinStatusToLevelTarget)`. Default 100, Minimum required status to set the level of a player.
Rule["MinStatusToBypassLockedServer"] = 0 --- Use `RuleI.Get(Rule.MinStatusToBypassLockedServer)`. Default 100, Players >= this status can log in to the server even when it is locked.
Rule["MinStatusToBypassCheckSumVerification"] = 0 --- Use `RuleI.Get(Rule.MinStatusToBypassCheckSumVerification)`. Default 100, Players >= this status can bypass the eqgame.exe and spells_us.txt checksum verification.
Rule["ZoneAutobootTimeoutMS"] = 0 --- Use `RuleI.Get(Rule.ZoneAutobootTimeoutMS)`. Default 60000, Time out for automatic booting of zones in milliseconds.
Rule["UseBannedIPsTable"] = 0 --- Use `RuleB.Get(Rule.UseBannedIPsTable)`. Default false, Toggle whether or not to check incoming client connections against the banned_ips table. Set this value to false to disable this feature.
Rule["EnableTutorialButton"] = 0 --- Use `RuleB.Get(Rule.EnableTutorialButton)`. Default true, Setting whether the Tutorial button should be active. At least in RoF2 you can always press the button, but it loses its effect.
Rule["EnableReturnHomeButton"] = 0 --- Use `RuleB.Get(Rule.EnableReturnHomeButton)`. Default true, Setting whether the Return Home button should be active.
Rule["MaxLevelForTutorial"] = 0 --- Use `RuleI.Get(Rule.MaxLevelForTutorial)`. Default 10, The highest level with which you can enter the tutorial.
Rule["TutorialZoneID"] = 0 --- Use `RuleI.Get(Rule.TutorialZoneID)`. Default 189, Zone ID of the tutorial.
Rule["GuildBankZoneID"] = 0 --- Use `RuleI.Get(Rule.GuildBankZoneID)`. Default 345, Zone ID of the guild bank.
Rule["MinOfflineTimeToReturnHome"] = 0 --- Use `RuleI.Get(Rule.MinOfflineTimeToReturnHome)`. Default 21600, Minimum offline time to activate the Return Home button. 21600 seconds is 6 Hours.
Rule["MaxClientsPerIP"] = -0 --- Use `RuleI.Get(Rule.MaxClientsPerIP)`. Default 1, Maximum number of clients allowed to connect per IP address if account status is < AddMaxClientsStatus. Default value: -1 (feature disabled).
Rule["ExemptMaxClientsStatus"] = -0 --- Use `RuleI.Get(Rule.ExemptMaxClientsStatus)`. Default 1, Exempt accounts from the MaxClientsPerIP and AddMaxClientsStatus rules, if their status is >= this value. Default value: -1 (feature disabled).
Rule["AddMaxClientsPerIP"] = -0 --- Use `RuleI.Get(Rule.AddMaxClientsPerIP)`. Default 1, Maximum number of clients allowed to connect per IP address if account status is < ExemptMaxClientsStatus. Default value: -1 (feature disabled).
Rule["AddMaxClientsStatus"] = -0 --- Use `RuleI.Get(Rule.AddMaxClientsStatus)`. Default 1, Accounts with status >= this rule will be allowed to use the amount of accounts defined in the AddMaxClientsPerIP. Default value: -1 (feature disabled).
Rule["MaxClientsSetByStatus"] = 0 --- Use `RuleB.Get(Rule.MaxClientsSetByStatus)`. Default false, If true, IP Limiting will be set to the status on the account as long as the status is > MaxClientsPerIP.
Rule["EnableIPExemptions"] = 0 --- Use `RuleB.Get(Rule.EnableIPExemptions)`. Default false, If true, ip_exemptions table is used, if there is no entry for the IP it will default to RuleI(World, MaxClientsPerIP).
Rule["ClearTempMerchantlist"] = 0 --- Use `RuleB.Get(Rule.ClearTempMerchantlist)`. Default true, Clears temp merchant items when world boots.
Rule["GMAccountIPList"] = 0 --- Use `RuleB.Get(Rule.GMAccountIPList)`. Default false, Check IP list against GM accounts. This increases the security of GM accounts, e.g. if you only allow localhost '127.0.0.1' for GM accounts. Think carefully about what you enter!.
Rule["MinGMAntiHackStatus"] = 0 --- Use `RuleI.Get(Rule.MinGMAntiHackStatus)`. Default 1, Minimum status to check against AntiHack list.
Rule["SoFStartZoneID"] = -0 --- Use `RuleI.Get(Rule.SoFStartZoneID)`. Default 1, Sets the Starting Zone for SoF Clients separate from Titanium Clients (-1 is disabled).
Rule["TitaniumStartZoneID"] = -0 --- Use `RuleI.Get(Rule.TitaniumStartZoneID)`. Default 1, Sets the Starting Zone for Titanium Clients (-1 is disabled). Replaces the old method.
Rule["ExpansionSettings"] = 0 --- Use `RuleI.Get(Rule.ExpansionSettings)`. Default 16383, Sets the expansion settings for the server, This is sent on login to world and affects client expansion settings. Defaults to all expansions enabled up to TSS, value is bitmask.
Rule["UseClientBasedExpansionSettings"] = 0 --- Use `RuleB.Get(Rule.UseClientBasedExpansionSettings)`. Default true, If true it will overrule World, ExpansionSettings and set someone's expansion based on the client they're using.
Rule["PVPSettings"] = 0 --- Use `RuleI.Get(Rule.PVPSettings)`. Default 0, Sets the PVP settings for the server. 1=Rallos Zek RuleSet, 2=Tallon/Vallon Zek Ruleset, 4=Sullon Zek Ruleset, 6=Discord Ruleset, anything above 6 is the Discord Ruleset without the no-drop restrictions removed. NOTE: edit IsAttackAllowed in Zone-table to accomodate for these rules.
Rule["PVPMinLevel"] = 0 --- Use `RuleI.Get(Rule.PVPMinLevel)`. Default 0, Minimum level to pvp.
Rule["IsGMPetitionWindowEnabled"] = 0 --- Use `RuleB.Get(Rule.IsGMPetitionWindowEnabled)`. Default false, Setting whether the GM petition window is available.
Rule["FVNoDropFlag"] = 0 --- Use `RuleI.Get(Rule.FVNoDropFlag)`. Default 0, Sets the Firiona Vie settings on the client, allowing trading of no-drop items. 1=for all players, 2=for GM only.
Rule["IPLimitDisconnectAll"] = 0 --- Use `RuleB.Get(Rule.IPLimitDisconnectAll)`. Default false, Disconnect all current clients by IP if they go over the IP limit.  This should allow people to quickly reconnect in the case of dead sessions waiting to timeout.
Rule["TellQueueSize"] = 0 --- Use `RuleI.Get(Rule.TellQueueSize)`. Default 20, Maximum tell queue size.
Rule["StartZoneSameAsBindOnCreation"] = 0 --- Use `RuleB.Get(Rule.StartZoneSameAsBindOnCreation)`. Default true, Should the start zone always be the same location as your bind?.
Rule["EnforceCharacterLimitAtLogin"] = 0 --- Use `RuleB.Get(Rule.EnforceCharacterLimitAtLogin)`. Default false, Enforce the limit for characters that are online at login.
Rule["EnableDevTools"] = 0 --- Use `RuleB.Get(Rule.EnableDevTools)`. Default true, Enable or Disable the Developer Tools globally (Most of the time you want this enabled).
Rule["EnableChecksumVerification"] = 0 --- Use `RuleB.Get(Rule.EnableChecksumVerification)`. Default false, Enable or Disable the Checksum Verification for eqgame.exe and spells_us.txt.
Rule["ClientLinkdeadMS"] = 0 --- Use `RuleI.Get(Rule.ClientLinkdeadMS)`. Default 90000, The time a client remains link dead on the server after a sudden disconnection (milliseconds).
Rule["GraveyardTimeMS"] = 0 --- Use `RuleI.Get(Rule.GraveyardTimeMS)`. Default 1200000, Time until a player corpse is moved to a zone's graveyard, if one is specified for the zone (milliseconds).
Rule["EnableShadowrest"] = 0 --- Use `RuleB.Get(Rule.EnableShadowrest)`. Default 1, Enables or disables the Shadowrest zone feature for player corpses. Default is turned on.
Rule["AutoShutdownDelay"] = 0 --- Use `RuleI.Get(Rule.AutoShutdownDelay)`. Default 60000, How long a dynamic zone stays loaded while empty (milliseconds).
Rule["PEQZoneReuseTime"] = 0 --- Use `RuleI.Get(Rule.PEQZoneReuseTime)`. Default 900, Seconds between two uses of the #peqzone command (Set to 0 to disable).
Rule["PEQZoneDebuff1"] = 0 --- Use `RuleI.Get(Rule.PEQZoneDebuff1)`. Default 4454, First debuff casted by #peqzone Default is Cursed Keeper's Blight.
Rule["PEQZoneDebuff2"] = 0 --- Use `RuleI.Get(Rule.PEQZoneDebuff2)`. Default 2209, Second debuff casted by #peqzone Default is Tendrils of Apathy.
Rule["UsePEQZoneDebuffs"] = 0 --- Use `RuleB.Get(Rule.UsePEQZoneDebuffs)`. Default true, Setting if the command #peqzone applies the defined debuffs.
Rule["PEQZoneHPRatio"] = 0 --- Use `RuleI.Get(Rule.PEQZoneHPRatio)`. Default 75, Required HP Ratio to use #peqzone.
Rule["HotZoneBonus"] = 0 --- Use `RuleR.Get(Rule.HotZoneBonus)`. Default 0, 75, Value which is added to the experience multiplier. This also applies to AA experience..
Rule["EbonCrystalItemID"] = 0 --- Use `RuleI.Get(Rule.EbonCrystalItemID)`. Default 40902, Item ID for Ebon Crystal.
Rule["RadiantCrystalItemID"] = 0 --- Use `RuleI.Get(Rule.RadiantCrystalItemID)`. Default 40903, Item ID for Radiant Crystal.
Rule["LevelBasedEXPMods"] = 0 --- Use `RuleB.Get(Rule.LevelBasedEXPMods)`. Default false, Allows you to use the level_exp_mods table in consideration to your players experience hits.
Rule["WeatherTimer"] = 0 --- Use `RuleI.Get(Rule.WeatherTimer)`. Default 600, Weather timer when no duration is available.
Rule["EnableLoggedOffReplenishments"] = 0 --- Use `RuleB.Get(Rule.EnableLoggedOffReplenishments)`. Default true, 'Replenish mana/hp/end if logged off for MinOfflineTimeToReplenishments.
Rule["MinOfflineTimeToReplenishments"] = 0 --- Use `RuleI.Get(Rule.MinOfflineTimeToReplenishments)`. Default 21600, Minimum time a player must be offline before LoggedOffReplenishments becomes active (seconds).
Rule["UseZoneController"] = 0 --- Use `RuleB.Get(Rule.UseZoneController)`. Default true, Enables the ability to use persistent quest based zone controllers (zone_controller.pl/lua).
Rule["EnableZoneControllerGlobals"] = 0 --- Use `RuleB.Get(Rule.EnableZoneControllerGlobals)`. Default false, Enables the ability to use quest globals with the zone controller NPC.
Rule["GlobalLootMultiplier"] = 0 --- Use `RuleI.Get(Rule.GlobalLootMultiplier)`. Default 1, Sets Global Loot drop multiplier for database based drops, useful for double, triple loot etc.
Rule["KillProcessOnDynamicShutdown"] = 0 --- Use `RuleB.Get(Rule.KillProcessOnDynamicShutdown)`. Default true, When process has booted a zone and has hit its zone shut down timer, it will hard kill the process to free memory back to the OS.
Rule["SecondsBeforeIdle"] = 0 --- Use `RuleI.Get(Rule.SecondsBeforeIdle)`. Default 60, Seconds before IDLE_WHEN_EMPTY define kicks in.
Rule["SpawnEventMin"] = 0 --- Use `RuleI.Get(Rule.SpawnEventMin)`. Default 3, When strict is set in spawn_events, specifies the max EQ minutes into the trigger hour a spawn_event will fire. Going below 3 may cause the spawn_event to not fire..
Rule["ForageChance"] = 0 --- Use `RuleI.Get(Rule.ForageChance)`. Default 25, Chance of foraging from zone table vs global table.
Rule["FixPathingZOnSendTo"] = 0 --- Use `RuleB.Get(Rule.FixPathingZOnSendTo)`. Default false, Try to repair Z coordinates in the SendTo routine as well.
Rule["FixZWhenPathing"] = 0 --- Use `RuleB.Get(Rule.FixZWhenPathing)`. Default true, Automatically fix NPC Z coordinates when moving/pathing/engaged (Far less CPU intensive than its predecessor).
Rule["DistanceCanTravelBeforeAdjustment"] = 0 --- Use `RuleR.Get(Rule.DistanceCanTravelBeforeAdjustment)`. Default 10, 0, Distance a mob can path before FixZ is called, depends on FixZWhenPathing.
Rule["MobZVisualDebug"] = 0 --- Use `RuleB.Get(Rule.MobZVisualDebug)`. Default false, Displays spell effects determining whether or not NPC is hitting Best Z calcs (blue for hit, red for miss).
Rule["FixPathingZMaxDeltaSendTo"] = 0 --- Use `RuleR.Get(Rule.FixPathingZMaxDeltaSendTo)`. Default 20,  "At runtime in SendTo: maximum change in Z to allow the BestZ code to apply").
Rule["FindBestZHeightAdjust"] = 0 --- Use `RuleI.Get(Rule.FindBestZHeightAdjust)`. Default 1, Adds this to the current Z before seeking the best Z position.
Rule["Find"] = 0 --- Use `RuleB.Get(Rule.Find)`. Default true, Enable pathing for FindPerson requests from the client.
Rule["Fear"] = 0 --- Use `RuleB.Get(Rule.Fear)`. Default true, Enable pathing for fear.
Rule["NavmeshStepSize"] = 0 --- Use `RuleR.Get(Rule.NavmeshStepSize)`. Default 100, 0f, Step size for the movement manager.
Rule["ShortMovementUpdateRange"] = 0 --- Use `RuleR.Get(Rule.ShortMovementUpdateRange)`. Default 130, 0f, Range for short movement updates.
Rule["MaxNavmeshNodes"] = 0 --- Use `RuleI.Get(Rule.MaxNavmeshNodes)`. Default 4092, Maximum navmesh nodes in a traversable path.
Rule["CheckForWaterOnSendTo"] = 0 --- Use `RuleB.Get(Rule.CheckForWaterOnSendTo)`. Default false, Checks if a mob has moved into/out of water on SendTo.
Rule["CheckForWaterWhenFishing"] = 0 --- Use `RuleB.Get(Rule.CheckForWaterWhenFishing)`. Default false, Only lets a player fish near water (if a water map exists for the zone).
Rule["FishingRodLength"] = 0 --- Use `RuleR.Get(Rule.FishingRodLength)`. Default 30,  "How far in front of player water must be for fishing to work").
Rule["FishingLineLength"] = 0 --- Use `RuleR.Get(Rule.FishingLineLength)`. Default 100,  "If water is more than this far below the player, it is considered too far to fish").
Rule["FishingLineStepSize"] = 0 --- Use `RuleR.Get(Rule.FishingLineStepSize)`. Default 1,  "Basic step size for fishing calc, too small and it will eat cpu, too large and it will miss potential water").
Rule["BaseCritChance"] = 0 --- Use `RuleI.Get(Rule.BaseCritChance)`. Default 0, Base percentage chance that everyone has to crit a spell.
Rule["BaseCritRatio"] = 0 --- Use `RuleI.Get(Rule.BaseCritRatio)`. Default 100, Base percentage bonus to damage on a successful spell crit. 100=2xdamage.
Rule["WizCritLevel"] = 0 --- Use `RuleI.Get(Rule.WizCritLevel)`. Default 12, Level wizards first get spell crits.
Rule["WizCritChance"] = 0 --- Use `RuleI.Get(Rule.WizCritChance)`. Default 7, Wizards crit chance, on top of BaseCritChance.
Rule["WizCritRatio"] = 0 --- Use `RuleI.Get(Rule.WizCritRatio)`. Default 0, Wizards crit bonus, on top of BaseCritRatio (should be 0 for Live-like).
Rule["TranslocateTimeLimit"] = 0 --- Use `RuleI.Get(Rule.TranslocateTimeLimit)`. Default 0, If not zero, time in seconds to accept a Translocate.
Rule["SacrificeMinLevel"] = 0 --- Use `RuleI.Get(Rule.SacrificeMinLevel)`. Default 46, First level the spell Sacrifice will work on.
Rule["SacrificeMaxLevel"] = 0 --- Use `RuleI.Get(Rule.SacrificeMaxLevel)`. Default 69, Last level the spell Sacrifice will work on.
Rule["SacrificeItemID"] = 0 --- Use `RuleI.Get(Rule.SacrificeItemID)`. Default 9963, Item ID of the item Sacrifice will return (defaults to an Essence Emerald).
Rule["EnableSpellGlobals"] = 0 --- Use `RuleB.Get(Rule.EnableSpellGlobals)`. Default false, If enabled, spells check the spell_globals table and compare character data from their quest globals before allowing the spell to scribe with scribespells/traindiscs.
Rule["EnableSpellBuckets"] = 0 --- Use `RuleB.Get(Rule.EnableSpellBuckets)`. Default false, If enabled, spells check the spell_buckets table and compare character data from their data buckets before allowing the spell to scribe with scribespells/traindiscs.
Rule["MaxBuffSlotsNPC"] = 0 --- Use `RuleI.Get(Rule.MaxBuffSlotsNPC)`. Default 60, Maximum number of NPC buff slots. The default value is the limit of the Titanium client.
Rule["MaxSongSlotsNPC"] = 0 --- Use `RuleI.Get(Rule.MaxSongSlotsNPC)`. Default 0, Maximum number of NPC song slots. NPC don't have songs, so it should be 0.
Rule["MaxDiscSlotsNPC"] = 0 --- Use `RuleI.Get(Rule.MaxDiscSlotsNPC)`. Default 0, Maximum number of NPC disc slots. NPC don't have discs, so it should be 0.
Rule["MaxTotalSlotsNPC"] = 0 --- Use `RuleI.Get(Rule.MaxTotalSlotsNPC)`. Default 60, Maximum total of NPC slots. The default value is the limit of the Titanium client.
Rule["MaxTotalSlotsPET"] = 0 --- Use `RuleI.Get(Rule.MaxTotalSlotsPET)`. Default 30, Maximum total of pet slots. The default value is the limit of the Titanium client.
Rule["EnableBlockedBuffs"] = 0 --- Use `RuleB.Get(Rule.EnableBlockedBuffs)`. Default true, Allow blocked spells.
Rule["ReflectType"] = 0 --- Use `RuleI.Get(Rule.ReflectType)`. Default 4, Reflect type. 0=disabled, 1=single target player spells only, 2=all player spells, 3=all single target spells, 4=all spells.
Rule["ReflectMessagesClose"] = 0 --- Use `RuleB.Get(Rule.ReflectMessagesClose)`. Default true, True (Live functionality) is for Reflect messages to show to players within close proximity. False shows just player reflecting.
Rule["LiveLikeFocusEffects"] = 0 --- Use `RuleB.Get(Rule.LiveLikeFocusEffects)`. Default true, Determines whether specific healing, dmg and mana reduction focuses are randomized.
Rule["BaseImmunityLevel"] = 0 --- Use `RuleI.Get(Rule.BaseImmunityLevel)`. Default 55, The level that targets start to be immune to stun, fear and mez spells with a maximum level of 0.
Rule["NPCIgnoreBaseImmunity"] = 0 --- Use `RuleB.Get(Rule.NPCIgnoreBaseImmunity)`. Default true, Whether or not NPC get to ignore the BaseImmunityLevel for their spells.
Rule["AvgSpellProcsPerMinute"] = 0 --- Use `RuleR.Get(Rule.AvgSpellProcsPerMinute)`. Default 6, 0, Adjust rate for sympathetic spell procs.
Rule["ResistFalloff"] = 0 --- Use `RuleI.Get(Rule.ResistFalloff)`. Default 67, Maximum that level that will adjust our resist chance based on level modifiers.
Rule["CharismaEffectiveness"] = 0 --- Use `RuleI.Get(Rule.CharismaEffectiveness)`. Default 10, Determines how much resist modification charisma applies to charm/pacify checks. Default 10 CHA = -1 resist mod.
Rule["CharismaEffectivenessCap"] = 0 --- Use `RuleI.Get(Rule.CharismaEffectivenessCap)`. Default 255, Determines how much resist modification charisma applies to charm/pacify checks. Default 10 CHA = -1 resist mod.
Rule["CharismaCharmDuration"] = 0 --- Use `RuleB.Get(Rule.CharismaCharmDuration)`. Default false, Allow CHA resist mod to extend charm duration.
Rule["CharmBreakCheckChance"] = 0 --- Use `RuleI.Get(Rule.CharmBreakCheckChance)`. Default 25, Determines chance for a charm break check to occur each buff tick.
Rule["CharmDisablesSpecialAbilities"] = 0 --- Use `RuleB.Get(Rule.CharmDisablesSpecialAbilities)`. Default false, When charm is cast on an NPC, strip their special abilities.
Rule["RootBreakFromSpells"] = 0 --- Use `RuleI.Get(Rule.RootBreakFromSpells)`. Default 55, Chance for root to break when cast on.
Rule["DeathSaveCharismaMod"] = 0 --- Use `RuleI.Get(Rule.DeathSaveCharismaMod)`. Default 3, Determines how much charisma effects chance of death save firing.
Rule["DivineInterventionHeal"] = 0 --- Use `RuleI.Get(Rule.DivineInterventionHeal)`. Default 8000, Divine intervention heal amount.
Rule["AdditiveBonusWornType"] = 0 --- Use `RuleI.Get(Rule.AdditiveBonusWornType)`. Default 0, Calc worn bonuses to add together (instead of taking highest) if set to THIS worn type. (2=Will covert live items automatically).
Rule["UseCHAScribeHack"] = 0 --- Use `RuleB.Get(Rule.UseCHAScribeHack)`. Default false, ScribeSpells and TrainDiscs quest functions will ignore entries where field 12 is CHA.
Rule["BuffLevelRestrictions"] = 0 --- Use `RuleB.Get(Rule.BuffLevelRestrictions)`. Default true, Buffs will not land on low level toons like live.
Rule["RootBreakCheckChance"] = 0 --- Use `RuleI.Get(Rule.RootBreakCheckChance)`. Default 70, Determines chance for a root break check to occur each buff tick.
Rule["FearBreakCheckChance"] = 0 --- Use `RuleI.Get(Rule.FearBreakCheckChance)`. Default 70, Determines chance for a fear break check to occur each buff tick.
Rule["SuccorFailChance"] = 0 --- Use `RuleI.Get(Rule.SuccorFailChance)`. Default 2, Determines chance for a succor spell not to teleport an invidual player.
Rule["FRProjectileItem_Titanium"] = 0 --- Use `RuleI.Get(Rule.FRProjectileItem_Titanium)`. Default 1113, Item id for Titanium clients for Fire 'spell projectile'.
Rule["FRProjectileItem_SOF"] = 0 --- Use `RuleI.Get(Rule.FRProjectileItem_SOF)`. Default 80684, Item id for SOF clients for Fire 'spell projectile'.
Rule["FRProjectileItem_NPC"] = 0 --- Use `RuleI.Get(Rule.FRProjectileItem_NPC)`. Default 80684, Item id for NPC Fire 'spell projectile'.
Rule["UseLiveSpellProjectileGFX"] = 0 --- Use `RuleB.Get(Rule.UseLiveSpellProjectileGFX)`. Default false, Use spell projectile graphics set in the spells_new table (player_1). Server must be using UF+ spell file.
Rule["FocusCombatProcs"] = 0 --- Use `RuleB.Get(Rule.FocusCombatProcs)`. Default false, Allow all combat procs to receive focus effects.
Rule["PreNerfBardAEDoT"] = 0 --- Use `RuleB.Get(Rule.PreNerfBardAEDoT)`. Default false, Allow bard AOE dots to damage targets when moving.
Rule["AI_SpellCastFinishedFailRecast"] = 0 --- Use `RuleI.Get(Rule.AI_SpellCastFinishedFailRecast)`. Default 800, AI spell recast time  when an spell is cast but fails, ie if stunned (milliseconds).
Rule["AI_EngagedNoSpellMinRecast"] = 0 --- Use `RuleI.Get(Rule.AI_EngagedNoSpellMinRecast)`. Default 500, AI spell recast time check when no spell is cast while engaged. Min time in random (milliseconds).
Rule["AI_EngagedNoSpellMaxRecast"] = 0 --- Use `RuleI.Get(Rule.AI_EngagedNoSpellMaxRecast)`. Default 1000, AI spell recast time check when no spell is cast engaged. Mmaximum time in random (milliseconds).
Rule["AI_EngagedBeneficialSelfChance"] = 0 --- Use `RuleI.Get(Rule.AI_EngagedBeneficialSelfChance)`. Default 100, Chance during first AI Cast check to do a beneficial spell on self.
Rule["AI_EngagedBeneficialOtherChance"] = 0 --- Use `RuleI.Get(Rule.AI_EngagedBeneficialOtherChance)`. Default 25, Chance during second AI Cast check to do a beneficial spell on others.
Rule["AI_EngagedDetrimentalChance"] = 0 --- Use `RuleI.Get(Rule.AI_EngagedDetrimentalChance)`. Default 20, Chance during third AI Cast check to do a determental spell on others.
Rule["AI_PursueNoSpellMinRecast"] = 0 --- Use `RuleI.Get(Rule.AI_PursueNoSpellMinRecast)`. Default 500, AI spell recast time check when no spell is cast while chasing target. Mmin time in random (milliseconds).
Rule["AI_PursueNoSpellMaxRecast"] = 0 --- Use `RuleI.Get(Rule.AI_PursueNoSpellMaxRecast)`. Default 2000, AI spell recast time check when no spell is cast while chasing target. Maximum time in random (milliseconds).
Rule["AI_PursueDetrimentalChance"] = 0 --- Use `RuleI.Get(Rule.AI_PursueDetrimentalChance)`. Default 90, Chance while chasing target to cast a detrimental spell.
Rule["AI_IdleNoSpellMinRecast"] = 0 --- Use `RuleI.Get(Rule.AI_IdleNoSpellMinRecast)`. Default 6000, AI spell recast time check when no spell is cast while idle. Mmin time in random (milliseconds).
Rule["AI_IdleNoSpellMaxRecast"] = 0 --- Use `RuleI.Get(Rule.AI_IdleNoSpellMaxRecast)`. Default 60000, AI spell recast time check when no spell is cast while chasing target. Maximum time in random (milliseconds).
Rule["AI_IdleBeneficialChance"] = 0 --- Use `RuleI.Get(Rule.AI_IdleBeneficialChance)`. Default 100, Chance while idle to do a beneficial spell on self or others.
Rule["AI_HealHPPct"] = 0 --- Use `RuleI.Get(Rule.AI_HealHPPct)`. Default 50, Hitpoint percentage at which NPC starts healing when max_hp of the spell is not set (inside and outside combat).
Rule["SHDProcIDOffByOne"] = 0 --- Use `RuleB.Get(Rule.SHDProcIDOffByOne)`. Default true, Pre June 2009 SHD spell procs were off by 1, they stopped doing this in June 2009 (UF+ spell files need this false).
Rule["Jun182014HundredHandsRevamp"] = 0 --- Use `RuleB.Get(Rule.Jun182014HundredHandsRevamp)`. Default false, This should be true for if you import a spell file newer than June 18, 2014.
Rule["SwarmPetTargetLock"] = 0 --- Use `RuleB.Get(Rule.SwarmPetTargetLock)`. Default false, Use old method of swarm pets target locking till target dies then despawning.
Rule["NPC_UseFocusFromSpells"] = 0 --- Use `RuleB.Get(Rule.NPC_UseFocusFromSpells)`. Default true, Allow NPC to use most spell derived focus effects.
Rule["NPC_UseFocusFromItems"] = 0 --- Use `RuleB.Get(Rule.NPC_UseFocusFromItems)`. Default false, Allow NPC to use most item derived focus effects.
Rule["UseAdditiveFocusFromWornSlot"] = 0 --- Use `RuleB.Get(Rule.UseAdditiveFocusFromWornSlot)`. Default false, Allows an additive focus effect to be calculated from worn slot.
Rule["AlwaysSendTargetsBuffs"] = 0 --- Use `RuleB.Get(Rule.AlwaysSendTargetsBuffs)`. Default false, Ignore Leadership Alternate Abilities level if true.
Rule["FlatItemExtraSpellAmt"] = 0 --- Use `RuleB.Get(Rule.FlatItemExtraSpellAmt)`. Default false, Allow SpellDmg stat to affect all spells, regardless of cast time/cooldown/etc.
Rule["IgnoreSpellDmgLvlRestriction"] = 0 --- Use `RuleB.Get(Rule.IgnoreSpellDmgLvlRestriction)`. Default false, Ignore the 5 level spread on applying SpellDmg.
Rule["ItemExtraSpellAmtCalcAsPercent"] = 0 --- Use `RuleB.Get(Rule.ItemExtraSpellAmtCalcAsPercent)`. Default false, Apply the Item stats Spell Dmg and Heal Amount as Percentage-based modifiers instead of flat additions.
Rule["AllowItemTGB"] = 0 --- Use `RuleB.Get(Rule.AllowItemTGB)`. Default false, Target group buff (/tgb) doesn't work with items on live, custom servers want it though.
Rule["NPCInnateProcOverride"] = 0 --- Use `RuleB.Get(Rule.NPCInnateProcOverride)`. Default true, NPC innate procs override the target type to single target.
Rule["OldRainTargets"] = 0 --- Use `RuleB.Get(Rule.OldRainTargets)`. Default false, Use old incorrectly implemented maximum targets for rains.
Rule["CallOfTheHeroAggroClearDist"] = 0 --- Use `RuleR.Get(Rule.CallOfTheHeroAggroClearDist)`. Default 250, 0, Distance at which CoTH will wipe aggro. To disable and always enable aggro wipe on any distance of CoTH, set to 0..
Rule["NPCSpellPush"] = 0 --- Use `RuleB.Get(Rule.NPCSpellPush)`. Default false, Enable spell push on NPCs.
Rule["July242002PetResists"] = 0 --- Use `RuleB.Get(Rule.July242002PetResists)`. Default true, Enable Pets using PCs resist change from July 24 2002.
Rule["AOEMaxTargets"] = 0 --- Use `RuleI.Get(Rule.AOEMaxTargets)`. Default 0, Max number of targets a Targeted AOE spell can cast on. Set to 0 for no limit..
Rule["CazicTouchTargetsPetOwner"] = 0 --- Use `RuleB.Get(Rule.CazicTouchTargetsPetOwner)`. Default true, If True, causes Cazic Touch to swap targets from pet to pet owner if a pet is tanking..
Rule["PreventFactionWarOnCharmBreak"] = 0 --- Use `RuleB.Get(Rule.PreventFactionWarOnCharmBreak)`. Default false, Enable spell interupts and dot removal on charm break to prevent faction wars..
Rule["AllowDoubleInvis"] = 0 --- Use `RuleB.Get(Rule.AllowDoubleInvis)`. Default true, Allows you to cast invisibility spells on a player that is already invisible, live like behavior..
Rule["AllowSpellMemorizeFromItem"] = 0 --- Use `RuleB.Get(Rule.AllowSpellMemorizeFromItem)`. Default false, Allows players to memorize spells by right-clicking spell scrolls.
Rule["InvisRequiresGroup"] = 0 --- Use `RuleB.Get(Rule.InvisRequiresGroup)`. Default false, Invis requires the the target to be in group..
Rule["ClericInnateHealFocus"] = 0 --- Use `RuleI.Get(Rule.ClericInnateHealFocus)`. Default 5, Clerics on live get a 5 pct innate heal focus.
Rule["DOTsScaleWithSpellDmg"] = 0 --- Use `RuleB.Get(Rule.DOTsScaleWithSpellDmg)`. Default false, Allow SpellDmg stat to affect DoT spells.
Rule["HOTsScaleWithHealAmt"] = 0 --- Use `RuleB.Get(Rule.HOTsScaleWithHealAmt)`. Default false, Allow HealAmt stat to affect HoT spells.
Rule["CompoundLifetapHeals"] = 0 --- Use `RuleB.Get(Rule.CompoundLifetapHeals)`. Default true, True: Lifetap heals calculate damage bonuses and then heal bonuses.  False:  Lifetaps heal using the amount damaged to mob..
Rule["UseFadingMemoriesMaxLevel"] = 0 --- Use `RuleB.Get(Rule.UseFadingMemoriesMaxLevel)`. Default false, Enables to limit field in spell data to set the max level that over which an NPC will ignore fading memories effect and not lose aggro..
Rule["FixBeaconHeading"] = 0 --- Use `RuleB.Get(Rule.FixBeaconHeading)`. Default false, Beacon spells use casters heading to fix live bug.  False: Live like heading always 0..
Rule["UseSpellImpliedTargeting"] = 0 --- Use `RuleB.Get(Rule.UseSpellImpliedTargeting)`. Default false, Replicates EQ2-style targeting behavior for spells. Spells will 'pass through' inappropriate targets to target's target if it is appropriate..
Rule["BuffsFadeOnDeath"] = 0 --- Use `RuleB.Get(Rule.BuffsFadeOnDeath)`. Default true, Disable to keep buffs from fading on death.
Rule["IllusionsAlwaysPersist"] = 0 --- Use `RuleB.Get(Rule.IllusionsAlwaysPersist)`. Default false, Allows Illusions to persist beyond death and zoning always..
Rule["UseItemCastMessage"] = 0 --- Use `RuleB.Get(Rule.UseItemCastMessage)`. Default false, Enable to use the \"item begins to glow\" messages when casting from an item..
Rule["TargetsTargetRequiresCombatRange"] = 0 --- Use `RuleB.Get(Rule.TargetsTargetRequiresCombatRange)`. Default true, Disable to remove combat range requirement from Target's Target Spell Target Type.
Rule["NPCBuffLevelRestrictions"] = 0 --- Use `RuleB.Get(Rule.NPCBuffLevelRestrictions)`. Default false, Impose BuffLevelRestrictions on NPCs if true.
Rule["AERampageSafeZone"] = 0 --- Use `RuleR.Get(Rule.AERampageSafeZone)`. Default 0, 018, max hit ae ramp reduction range.
Rule["PetBaseCritChance"] = 0 --- Use `RuleI.Get(Rule.PetBaseCritChance)`. Default 0, Pet base crit chance.
Rule["NPCBashKickLevel"] = 0 --- Use `RuleI.Get(Rule.NPCBashKickLevel)`. Default 6, The level that NPCcan KICK/BASH.
Rule["MeleeCritDifficulty"] = 0 --- Use `RuleI.Get(Rule.MeleeCritDifficulty)`. Default 8900, Value against which is rolled to check if a melee crit is triggered. Lower is easier.
Rule["ArcheryCritDifficulty"] = 0 --- Use `RuleI.Get(Rule.ArcheryCritDifficulty)`. Default 3400, Value against which is rolled to check if an archery crit is triggered. Lower is easier.
Rule["ThrowingCritDifficulty"] = 0 --- Use `RuleI.Get(Rule.ThrowingCritDifficulty)`. Default 1100, Value against which is rolled to check if a throwing crit is triggered. Lower is easier.
Rule["NPCCanCrit"] = 0 --- Use `RuleB.Get(Rule.NPCCanCrit)`. Default false, Setting whether an NPC can land critical hits.
Rule["UseIntervalAC"] = 0 --- Use `RuleB.Get(Rule.UseIntervalAC)`. Default true, Switch whether bonuses, armour class, multipliers, classes and caps should be considered in the calculation of damage values.
Rule["PetAttackMagicLevel"] = 0 --- Use `RuleI.Get(Rule.PetAttackMagicLevel)`. Default 10, Level at which pets can cause magic damage, no longer used.
Rule["NPCAttackMagicLevel"] = 0 --- Use `RuleI.Get(Rule.NPCAttackMagicLevel)`. Default 10, Level at which NPC and pets can cause magic damage.
Rule["EnableFearPathing"] = 0 --- Use `RuleB.Get(Rule.EnableFearPathing)`. Default true, Setting whether to use pathing during fear.
Rule["FleeGray"] = 0 --- Use `RuleB.Get(Rule.FleeGray)`. Default true, If true FleeGrayHPRatio will be used.
Rule["FleeGrayHPRatio"] = 0 --- Use `RuleI.Get(Rule.FleeGrayHPRatio)`. Default 50, HP percentage when a Gray NPC begins to flee.
Rule["FleeGrayMaxLevel"] = 0 --- Use `RuleI.Get(Rule.FleeGrayMaxLevel)`. Default 18, NPC above this level won't do gray/green con flee.
Rule["FleeHPRatio"] = 0 --- Use `RuleI.Get(Rule.FleeHPRatio)`. Default 25, HP percentage when a NPC begins to flee.
Rule["FleeIfNotAlone"] = 0 --- Use `RuleB.Get(Rule.FleeIfNotAlone)`. Default false, If false, mobs won't flee if other mobs are in combat with it.
Rule["AdjustProcPerMinute"] = 0 --- Use `RuleB.Get(Rule.AdjustProcPerMinute)`. Default true, Adapt the average proc rate to the speed of the weapon.
Rule["AvgProcsPerMinute"] = 0 --- Use `RuleR.Get(Rule.AvgProcsPerMinute)`. Default 2, 0, Average proc rate per minute.
Rule["ProcPerMinDexContrib"] = 0 --- Use `RuleR.Get(Rule.ProcPerMinDexContrib)`. Default 0, 075, Increases the probability of a proc increased by DEX by the value indicated.
Rule["BaseProcChance"] = 0 --- Use `RuleR.Get(Rule.BaseProcChance)`. Default 0, 035, Base chance for procs.
Rule["ProcDexDivideBy"] = 0 --- Use `RuleR.Get(Rule.ProcDexDivideBy)`. Default 11000,  "Divisor for the probability of a proc increased by dexterity").
Rule["MinRangedAttackDist"] = 0 --- Use `RuleI.Get(Rule.MinRangedAttackDist)`. Default 25, Minimum Distance to use Ranged Attacks.
Rule["ArcheryBonusRequiresStationary"] = 0 --- Use `RuleB.Get(Rule.ArcheryBonusRequiresStationary)`. Default true, does the 2x archery bonus chance require a stationary npc.
Rule["ArcheryNPCMultiplier"] = 0 --- Use `RuleR.Get(Rule.ArcheryNPCMultiplier)`. Default 1, 0, Value is multiplied by the regular dmg to get the archery dmg.
Rule["AssistNoTargetSelf"] = 0 --- Use `RuleB.Get(Rule.AssistNoTargetSelf)`. Default true, When assisting a target that does not have a target: true = target self, false = leave target as was before assist (false = live like).
Rule["MaxRampageTargets"] = 0 --- Use `RuleI.Get(Rule.MaxRampageTargets)`. Default 3, Maximum number of people hit with rampage.
Rule["DefaultRampageTargets"] = 0 --- Use `RuleI.Get(Rule.DefaultRampageTargets)`. Default 1, Default number of people to hit with rampage.
Rule["RampageHitsTarget"] = 0 --- Use `RuleB.Get(Rule.RampageHitsTarget)`. Default false, Rampage will hit the target if it still has targets left.
Rule["MaxFlurryHits"] = 0 --- Use `RuleI.Get(Rule.MaxFlurryHits)`. Default 2, Maximum number of extra hits from flurry.
Rule["MinHastedDelay"] = 0 --- Use `RuleI.Get(Rule.MinHastedDelay)`. Default 400, Minimum hasted combat delay.
Rule["AvgDefProcsPerMinute"] = 0 --- Use `RuleR.Get(Rule.AvgDefProcsPerMinute)`. Default 2, 0, Average defense procs per minute.
Rule["DefProcPerMinAgiContrib"] = 0 --- Use `RuleR.Get(Rule.DefProcPerMinAgiContrib)`. Default 0, 075, How much agility contributes to defensive proc rate.
Rule["NPCFlurryChance"] = 0 --- Use `RuleI.Get(Rule.NPCFlurryChance)`. Default 20, Chance for NPC to flurry.
Rule["TauntOverLevel"] = 0 --- Use `RuleB.Get(Rule.TauntOverLevel)`. Default 1, Allows you to taunt NPC's over warriors level.
Rule["TauntSkillFalloff"] = 0 --- Use `RuleR.Get(Rule.TauntSkillFalloff)`. Default 0, 33, For every taunt skill point that's not maxed you lose this percentage chance to taunt.
Rule["EXPFromDmgShield"] = 0 --- Use `RuleB.Get(Rule.EXPFromDmgShield)`. Default false, Determine if damage from a damage shield counts for experience gain.
Rule["QuiverHasteCap"] = 0 --- Use `RuleI.Get(Rule.QuiverHasteCap)`. Default 1000, Quiver haste cap 1000 on live for a while, currently 700 on live.
Rule["BerserkerFrenzyStart"] = 0 --- Use `RuleI.Get(Rule.BerserkerFrenzyStart)`. Default 35, Percentage Health Points below which Warrior and Berserker start frenzy.
Rule["BerserkerFrenzyEnd"] = 0 --- Use `RuleI.Get(Rule.BerserkerFrenzyEnd)`. Default 45, Percentage Health Points above which Warrior and Berserker end frenzy.
Rule["OneProcPerWeapon"] = 0 --- Use `RuleB.Get(Rule.OneProcPerWeapon)`. Default true, If enabled, One proc per weapon per round.
Rule["ProjectileDmgOnImpact"] = 0 --- Use `RuleB.Get(Rule.ProjectileDmgOnImpact)`. Default true, If enabled, projectiles (i.e. arrows) will hit on impact, instead of instantly.
Rule["MeleePush"] = 0 --- Use `RuleB.Get(Rule.MeleePush)`. Default true, Enable melee push.
Rule["MeleePushChance"] = 0 --- Use `RuleI.Get(Rule.MeleePushChance)`. Default 50, NPC chance the target will be pushed. Made up, 100 actually isn't that bad.
Rule["UseLiveCombatRounds"] = 0 --- Use `RuleB.Get(Rule.UseLiveCombatRounds)`. Default true, Turn this false if you don't want to worry about fixing up combat rounds for NPCs.
Rule["NPCAssistCap"] = 0 --- Use `RuleI.Get(Rule.NPCAssistCap)`. Default 5, Maximum number of NPC that will assist another NPC at once.
Rule["NPCAssistCapTimer"] = 0 --- Use `RuleI.Get(Rule.NPCAssistCapTimer)`. Default 6000, Time a NPC will take to clear assist aggro cap space (milliseconds).
Rule["UseRevampHandToHand"] = 0 --- Use `RuleB.Get(Rule.UseRevampHandToHand)`. Default false, Use h2h revamped dmg/delays I believe this was implemented during SoF.
Rule["ClassicMasterWu"] = 0 --- Use `RuleB.Get(Rule.ClassicMasterWu)`. Default false, Classic Master Wu uses a random special, modern doesn't.
Rule["HitBoxMod"] = 0 --- Use `RuleR.Get(Rule.HitBoxMod)`. Default 1, 00, Added to test hit boxes..
Rule["LevelToStopDamageCaps"] = 0 --- Use `RuleI.Get(Rule.LevelToStopDamageCaps)`. Default 0, Level to stop damage caps. 1 will effectively disable them, 20 should give basically same results as old incorrect system.
Rule["LevelToStopACTwinkControl"] = 0 --- Use `RuleI.Get(Rule.LevelToStopACTwinkControl)`. Default 50, Level to stop armorclass twink control. 1 will effectively disable it, 50 should give basically same results as current system.
Rule["ClassicNPCBackstab"] = 0 --- Use `RuleB.Get(Rule.ClassicNPCBackstab)`. Default false, True disables NPC facestab - NPC get normal attack if not behind.
Rule["UseNPCDamageClassLevelMods"] = 0 --- Use `RuleB.Get(Rule.UseNPCDamageClassLevelMods)`. Default true, Uses GetClassLevelDamageMod calc in npc_scale_manager.
Rule["UseExtendedPoisonProcs"] = 0 --- Use `RuleB.Get(Rule.UseExtendedPoisonProcs)`. Default false, Allow old school poisons to last until characrer zones, at a lower proc rate.
Rule["EnableSneakPull"] = 0 --- Use `RuleB.Get(Rule.EnableSneakPull)`. Default false, Enable implementation of Sneak Pull.
Rule["SneakPullAssistRange"] = 0 --- Use `RuleI.Get(Rule.SneakPullAssistRange)`. Default 400, Modified range of assist for sneak pull.
Rule["Classic2HBAnimation"] = 0 --- Use `RuleB.Get(Rule.Classic2HBAnimation)`. Default false, 2HB will use the 2 hand piercing animation instead of the overhead slashing animation.
Rule["ArcheryConsumesAmmo"] = 0 --- Use `RuleB.Get(Rule.ArcheryConsumesAmmo)`. Default true, Set to false to disable Archery Ammo Consumption.
Rule["ThrowingConsumesAmmo"] = 0 --- Use `RuleB.Get(Rule.ThrowingConsumesAmmo)`. Default true, Set to false to disable Throwing Ammo Consumption.
Rule["UseLiveRiposteMechanics"] = 0 --- Use `RuleB.Get(Rule.UseLiveRiposteMechanics)`. Default false, Set to true to disable SPA 173 SE_RiposteChance from making those with the effect on them immune to enrage, can longer riposte from a riposte..
Rule["FrontalStunImmunityClasses"] = 0 --- Use `RuleI.Get(Rule.FrontalStunImmunityClasses)`. Default 0, Bitmask for Classes than have frontal stun immunity, No Races (0) by default..
Rule["NPCsUseFrontalStunImmunityClasses"] = 0 --- Use `RuleB.Get(Rule.NPCsUseFrontalStunImmunityClasses)`. Default false, Enable or disable NPCs using frontal stun immunity Classes from Combat:FrontalStunImmunityClasses, false by default..
Rule["FrontalStunImmunityRaces"] = 0 --- Use `RuleI.Get(Rule.FrontalStunImmunityRaces)`. Default 512, Bitmask for Races than have frontal stun immunity, Ogre (512) only by default..
Rule["NPCsUseFrontalStunImmunityRaces"] = 0 --- Use `RuleB.Get(Rule.NPCsUseFrontalStunImmunityRaces)`. Default true, Enable or disable NPCs using frontal stun immunity Races from Combat:FrontalStunImmunityRaces, true by default..
Rule["AssassinateOnlyHumanoids"] = 0 --- Use `RuleB.Get(Rule.AssassinateOnlyHumanoids)`. Default true, Enable or disable Assassinate only being allowed on Humanoids, true by default..
Rule["HeadshotOnlyHumanoids"] = 0 --- Use `RuleB.Get(Rule.HeadshotOnlyHumanoids)`. Default true, Enable or disable Headshot only being allowed on Humanoids, true by default..
Rule["EnableWarriorShielding"] = 0 --- Use `RuleB.Get(Rule.EnableWarriorShielding)`. Default true, Enable or disable Warrior Shielding Ability (/shield), true by default..
Rule["BackstabIgnoresElemental"] = 0 --- Use `RuleB.Get(Rule.BackstabIgnoresElemental)`. Default false, Enable or disable Elemental weapon damage affecting backstab damage, false by default..
Rule["BackstabIgnoresBane"] = 0 --- Use `RuleB.Get(Rule.BackstabIgnoresBane)`. Default false, Enable or disable Bane weapon damage affecting backstab damage, false by default..
Rule["MinorNPCCorpseDecayTimeMS"] = 0 --- Use `RuleI.Get(Rule.MinorNPCCorpseDecayTimeMS)`. Default 450000, NPC corpse decay time, if NPC below level 55 (milliseconds).
Rule["MajorNPCCorpseDecayTimeMS"] = 0 --- Use `RuleI.Get(Rule.MajorNPCCorpseDecayTimeMS)`. Default 1500000, NPC corpse decay time, if NPC equal or greater than level 55 (milliseconds).
Rule["CorpseUnlockTimer"] = 0 --- Use `RuleI.Get(Rule.CorpseUnlockTimer)`. Default 150000, Time after which corpses are unlocked for everyone to loot (milliseconds).
Rule["EmptyNPCCorpseDecayTimeMS"] = 0 --- Use `RuleI.Get(Rule.EmptyNPCCorpseDecayTimeMS)`. Default 0, NPC corpse decay time, if no items are left on the corpse (milliseconds).
Rule["UseItemBonusesForNonPets"] = 0 --- Use `RuleB.Get(Rule.UseItemBonusesForNonPets)`. Default true, Switch whether item bonuses should be used for NPCs who are not pets.
Rule["UseBaneDamage"] = 0 --- Use `RuleB.Get(Rule.UseBaneDamage)`. Default false, If NPCs can't inherently hit the target we don't add bane/magic dmg which isn't exactly the same as PCs.
Rule["SayPauseTimeInSec"] = 0 --- Use `RuleI.Get(Rule.SayPauseTimeInSec)`. Default 5, Time span in which an NPC pauses his movement after a Say event without aggro (seconds).
Rule["OOCRegen"] = 0 --- Use `RuleI.Get(Rule.OOCRegen)`. Default 0, Enable out-of-combat regeneration for NPC.
Rule["BuffFriends"] = 0 --- Use `RuleB.Get(Rule.BuffFriends)`. Default false, Setting whether NPC should buff other NPC.
Rule["EnableNPCQuestJournal"] = 0 --- Use `RuleB.Get(Rule.EnableNPCQuestJournal)`. Default false, Setting whether the NPC Quest Journal is active.
Rule["LastFightingDelayMovingMin"] = 0 --- Use `RuleI.Get(Rule.LastFightingDelayMovingMin)`. Default 10000, Minimum time before mob goes home after all aggro loss (milliseconds).
Rule["LastFightingDelayMovingMax"] = 0 --- Use `RuleI.Get(Rule.LastFightingDelayMovingMax)`. Default 20000, Maximum time before mob goes home after all aggro loss (milliseconds).
Rule["SmartLastFightingDelayMoving"] = 0 --- Use `RuleB.Get(Rule.SmartLastFightingDelayMoving)`. Default true, When true, mobs that started going home previously will do so again immediately if still on FD hate list.
Rule["ReturnNonQuestNoDropItems"] = 0 --- Use `RuleB.Get(Rule.ReturnNonQuestNoDropItems)`. Default false, Returns NO DROP items on NPC that don't have an EVENT_TRADE sub in their script.
Rule["StartEnrageValue"] = 0 --- Use `RuleI.Get(Rule.StartEnrageValue)`. Default 9,  Percentage HP that an NPC will begin to enrage.
Rule["LiveLikeEnrage"] = 0 --- Use `RuleB.Get(Rule.LiveLikeEnrage)`. Default false, If set to true then only player controlled pets will enrage.
Rule["EnableMeritBasedFaction"] = 0 --- Use `RuleB.Get(Rule.EnableMeritBasedFaction)`. Default false, If set to true, faction will be given in the same way as experience (solo/group/raid).
Rule["NPCToNPCAggroTimerMin"] = 0 --- Use `RuleI.Get(Rule.NPCToNPCAggroTimerMin)`. Default 500, Minimum time span after which one NPC aggro another NPC (milliseconds).
Rule["NPCToNPCAggroTimerMax"] = 0 --- Use `RuleI.Get(Rule.NPCToNPCAggroTimerMax)`. Default 6000, Maximum time span after which one NPC aggro another NPC (milliseconds).
Rule["UseClassAsLastName"] = 0 --- Use `RuleB.Get(Rule.UseClassAsLastName)`. Default true, Uses class archetype as LastName for NPC with none.
Rule["NewLevelScaling"] = 0 --- Use `RuleB.Get(Rule.NewLevelScaling)`. Default true, Better level scaling, use old if new formulas would break your server.
Rule["NPCGatePercent"] = 0 --- Use `RuleI.Get(Rule.NPCGatePercent)`. Default 20,  Percentage at which the NPC Will attempt to gate at.
Rule["NPCGateNearBind"] = 0 --- Use `RuleB.Get(Rule.NPCGateNearBind)`. Default false, Will NPC attempt to gate when near bind location?.
Rule["NPCGateDistanceBind"] = 0 --- Use `RuleI.Get(Rule.NPCGateDistanceBind)`. Default 75, Distance from bind before NPC will attempt to gate.
Rule["NPCHealOnGate"] = 0 --- Use `RuleB.Get(Rule.NPCHealOnGate)`. Default true, Will the NPC Heal on Gate.
Rule["UseMeditateBasedManaRegen"] = 0 --- Use `RuleB.Get(Rule.UseMeditateBasedManaRegen)`. Default false, Based NPC ooc regen on Meditate skill.
Rule["NPCHealOnGateAmount"] = 0 --- Use `RuleR.Get(Rule.NPCHealOnGateAmount)`. Default 25,  "How much the NPC will heal on gate if enabled").
Rule["AnimalsOpenDoors"] = 0 --- Use `RuleB.Get(Rule.AnimalsOpenDoors)`. Default true, Determines or not whether animals open doors or not when they approach them.
Rule["MaxRaceID"] = 0 --- Use `RuleI.Get(Rule.MaxRaceID)`. Default 732, Maximum Race ID, RoF2 by default supports up to 732.
Rule["DisableLastNames"] = 0 --- Use `RuleB.Get(Rule.DisableLastNames)`. Default false, Enable to disable NPC Last Names.
Rule["SmartAggroList"] = 0 --- Use `RuleB.Get(Rule.SmartAggroList)`. Default true, Smart aggro list attempts to choose targets in a much smarter fashion, prefering players to pets, sitting and critically injured players to normal players, and players in melee range to players not.
Rule["SittingAggroMod"] = 0 --- Use `RuleI.Get(Rule.SittingAggroMod)`. Default 35, Aggro increase against sitting targets. 35=35%.
Rule["MeleeRangeAggroMod"] = 0 --- Use `RuleI.Get(Rule.MeleeRangeAggroMod)`. Default 10, Aggro increase against targets in melee range. 10=10%.
Rule["CurrentTargetAggroMod"] = 0 --- Use `RuleI.Get(Rule.CurrentTargetAggroMod)`. Default 0, Aggro increase against current target. 0% = prefer the current target to any other. Makes it harder for our NPC to switch targets.
Rule["CriticallyWoundedAggroMod"] = 0 --- Use `RuleI.Get(Rule.CriticallyWoundedAggroMod)`. Default 100, Aggro increase against critical wounded targets.
Rule["SpellAggroMod"] = 0 --- Use `RuleI.Get(Rule.SpellAggroMod)`. Default 100, Aggro increase for spells.
Rule["PetSpellAggroMod"] = 0 --- Use `RuleI.Get(Rule.PetSpellAggroMod)`. Default 10, Aggro increase for pet spells.
Rule["TunnelVisionAggroMod"] = 0 --- Use `RuleR.Get(Rule.TunnelVisionAggroMod)`. Default 0, 75, People not currently the top hate generate this much hate on a Tunnel Vision mob.
Rule["MaxScalingProcAggro"] = 0 --- Use `RuleI.Get(Rule.MaxScalingProcAggro)`. Default 400, Set to -1 for no limit. Maximum amount of aggro that HP scaling SPA effect in a proc will add.
Rule["IntAggroThreshold"] = 0 --- Use `RuleI.Get(Rule.IntAggroThreshold)`. Default 75, Int lesser or equal the value will aggro regardless of level difference.
Rule["AllowTickPulling"] = 0 --- Use `RuleB.Get(Rule.AllowTickPulling)`. Default false, tick pulling is an exploit in an NPC's call for help fixed sometime in 2006 on live.
Rule["MinAggroLevel"] = 0 --- Use `RuleI.Get(Rule.MinAggroLevel)`. Default 18, Minimum level for use with UseLevelAggro.
Rule["UseLevelAggro"] = 0 --- Use `RuleB.Get(Rule.UseLevelAggro)`. Default true, MinAggroLevel rule value+ and Undead will aggro regardless of level difference. This will disabled Rule:IntAggroThreshold if set to true.
Rule["ClientAggroCheckMovingInterval"] = 0 --- Use `RuleI.Get(Rule.ClientAggroCheckMovingInterval)`. Default 1000, Interval in which clients actually check for aggro while moving - in milliseconds - this should be lower than ClientAggroCheckIdleInterval.
Rule["ClientAggroCheckIdleInterval"] = 0 --- Use `RuleI.Get(Rule.ClientAggroCheckIdleInterval)`. Default 6000, Interval in which clients actually check for aggro while idle - in milliseconds - this should be higher than ClientAggroCheckMovingInterval.
Rule["PetAttackRange"] = 0 --- Use `RuleR.Get(Rule.PetAttackRange)`. Default 40000, 0, Maximum squared range /pet attack works at default is 200.
Rule["NPCAggroMaxDistanceEnabled"] = 0 --- Use `RuleB.Get(Rule.NPCAggroMaxDistanceEnabled)`. Default true, If enabled, NPC's will drop aggro beyond 600 units or what is defined at the zone level.
Rule["AggroPlayerPets"] = 0 --- Use `RuleB.Get(Rule.AggroPlayerPets)`. Default false, If enabled, NPCs will aggro player pets.
Rule["EnableTaskSystem"] = 0 --- Use `RuleB.Get(Rule.EnableTaskSystem)`. Default true, Globally enable or disable the Task system.
Rule["PeriodicCheckTimer"] = 0 --- Use `RuleI.Get(Rule.PeriodicCheckTimer)`. Default 5, Seconds between checks for failed tasks. Also used by the 'Touch' activity.
Rule["RecordCompletedTasks"] = 0 --- Use `RuleB.Get(Rule.RecordCompletedTasks)`. Default true, Record completed tasks.
Rule["RecordCompletedOptionalActivities"] = 0 --- Use `RuleB.Get(Rule.RecordCompletedOptionalActivities)`. Default false, Record completed optional activities.
Rule["KeepOneRecordPerCompletedTask"] = 0 --- Use `RuleB.Get(Rule.KeepOneRecordPerCompletedTask)`. Default true, Keep only one record per completed task.
Rule["EnableTaskProximity"] = 0 --- Use `RuleB.Get(Rule.EnableTaskProximity)`. Default true, Enable task proximity system.
Rule["RequestCooldownTimerSeconds"] = 0 --- Use `RuleI.Get(Rule.RequestCooldownTimerSeconds)`. Default 15, Seconds between allowing characters to request tasks (live-like default: 15 seconds).
Rule["SharedTasksWorldProcessRate"] = 0 --- Use `RuleI.Get(Rule.SharedTasksWorldProcessRate)`. Default 6000, Timer interval (milliseconds) that shared tasks are processed in world.
Rule["SharedTasksTerminateTimerMS"] = 0 --- Use `RuleI.Get(Rule.SharedTasksTerminateTimerMS)`. Default 120000, Delay (milliseconds) until a shared task is terminated if requirements are no longer met after member removal (default: 2 minutes).
Rule["UpdateOneElementPerTask"] = 0 --- Use `RuleB.Get(Rule.UpdateOneElementPerTask)`. Default true, If true (live-like) task updates only increment the first matching activity. If false all matching elements will be incremented..
Rule["Say"] = 0 --- Use `RuleI.Get(Rule.Say)`. Default 15, The range that is required before /say or hail messages will work to an NPC.
Rule["Emote"] = 0 --- Use `RuleI.Get(Rule.Emote)`. Default 135, The packet range in which emote messages are sent'.
Rule["BeginCast"] = 0 --- Use `RuleI.Get(Rule.BeginCast)`. Default 200, The packet range in which begin cast messages are sent.
Rule["Anims"] = 0 --- Use `RuleI.Get(Rule.Anims)`. Default 135, The packet range in which begin cast messages are sent.
Rule["SpellParticles"] = 0 --- Use `RuleI.Get(Rule.SpellParticles)`. Default 135, The packet range in which spell particles are sent.
Rule["DamageMessages"] = 0 --- Use `RuleI.Get(Rule.DamageMessages)`. Default 50, The packet range in which damage messages are sent (non-crit).
Rule["SpellMessages"] = 0 --- Use `RuleI.Get(Rule.SpellMessages)`. Default 75, The packet range in which spell damage messages are sent.
Rule["SongMessages"] = 0 --- Use `RuleI.Get(Rule.SongMessages)`. Default 75, The packet range in which song messages are sent.
Rule["ClientPositionUpdates"] = 0 --- Use `RuleI.Get(Rule.ClientPositionUpdates)`. Default 300, Distance in which the own changed position is communicated to other clients.
Rule["CriticalDamage"] = 0 --- Use `RuleI.Get(Rule.CriticalDamage)`. Default 80, The packet range in which critical hit messages are sent.
Rule["MobCloseScanDistance"] = 0 --- Use `RuleI.Get(Rule.MobCloseScanDistance)`. Default 600, Close scan distance.
Rule["Enabled"] = 0 --- Use `RuleB.Get(Rule.Enabled)`. Default false, Enable of disable bot functionality, default is false.
Rule["BotExpansionSettings"] = 0 --- Use `RuleI.Get(Rule.BotExpansionSettings)`. Default 16383, Sets the expansion settings for bot use. Defaults to all expansions enabled up to TSS.
Rule["AllowCamelCaseNames"] = 0 --- Use `RuleB.Get(Rule.AllowCamelCaseNames)`. Default false, Allows the use of 'MyBot' type names.
Rule["AllowBotEquipAnyRaceGear"] = 0 --- Use `RuleB.Get(Rule.AllowBotEquipAnyRaceGear)`. Default false, Allows Bots to wear Equipment even if their race is not valid.
Rule["CommandSpellRank"] = 0 --- Use `RuleI.Get(Rule.CommandSpellRank)`. Default 1, Filters bot command spells by rank. 1, 2 and 3 are valid filters - any other number allows all ranks.
Rule["CreationLimit"] = 0 --- Use `RuleI.Get(Rule.CreationLimit)`. Default 150, Number of bots that each account can create.
Rule["FinishBuffing"] = 0 --- Use `RuleB.Get(Rule.FinishBuffing)`. Default false, Allow for buffs to complete even if the bot caster is out of mana. Only affects buffing out of combat.
Rule["GroupBuffing"] = 0 --- Use `RuleB.Get(Rule.GroupBuffing)`. Default false, Bots will cast single target buffs as group buffs, default is false for single. Does not make single target buffs work for MGB.
Rule["HealRotationMaxMembers"] = 0 --- Use `RuleI.Get(Rule.HealRotationMaxMembers)`. Default 24, Maximum number of heal rotation members.
Rule["HealRotationMaxTargets"] = 0 --- Use `RuleI.Get(Rule.HealRotationMaxTargets)`. Default 12, Maximum number of heal rotation targets.
Rule["ManaRegen"] = 0 --- Use `RuleR.Get(Rule.ManaRegen)`. Default 2, 0, Adjust mana regen for bots, 1 is fast and higher numbers slow it down 3 is about the same as players.
Rule["PreferNoManaCommandSpells"] = 0 --- Use `RuleB.Get(Rule.PreferNoManaCommandSpells)`. Default true, Give sorting priority to newer no-mana spells (i.e., 'Bind Affinity').
Rule["QuestableSpawnLimit"] = 0 --- Use `RuleB.Get(Rule.QuestableSpawnLimit)`. Default false, Optional quest method to manage bot spawn limits using the quest_globals name bot_spawn_limit, see: /bazaar/Aediles_Thrall.pl.
Rule["SpawnLimit"] = 0 --- Use `RuleI.Get(Rule.SpawnLimit)`. Default 71, Number of bots a character can have spawned at one time, You + 71 bots is a 12 group pseudo-raid.
Rule["BotGroupXP"] = 0 --- Use `RuleB.Get(Rule.BotGroupXP)`. Default false, Determines whether client gets experience for bots outside their group.
Rule["BotLevelsWithOwner"] = 0 --- Use `RuleB.Get(Rule.BotLevelsWithOwner)`. Default false, Auto-updates spawned bots as owner levels/de-levels (false is original behavior).
Rule["BotCharacterLevel"] = 0 --- Use `RuleI.Get(Rule.BotCharacterLevel)`. Default 0, If level is greater that value player can spawn bots if BotCharacterLevelEnabled is true.
Rule["CasterStopMeleeLevel"] = 0 --- Use `RuleI.Get(Rule.CasterStopMeleeLevel)`. Default 13, Level at which caster bots stop melee attacks.
Rule["AllowOwnerOptionAltCombat"] = 0 --- Use `RuleB.Get(Rule.AllowOwnerOptionAltCombat)`. Default true, When option is enabled, bots will use an auto-/shared-aggro combat model.
Rule["AllowOwnerOptionAutoDefend"] = 0 --- Use `RuleB.Get(Rule.AllowOwnerOptionAutoDefend)`. Default true, When option is enabled, bots will defend their owner on enemy aggro.
Rule["LeashDistance"] = 0 --- Use `RuleR.Get(Rule.LeashDistance)`. Default 562500, 0f, Distance a bot is allowed to travel from leash owner before being pulled back (squared value).
Rule["AllowApplyPoisonCommand"] = 0 --- Use `RuleB.Get(Rule.AllowApplyPoisonCommand)`. Default true, Allows the use of the bot command 'applypoison'.
Rule["AllowApplyPotionCommand"] = 0 --- Use `RuleB.Get(Rule.AllowApplyPotionCommand)`. Default true, Allows the use of the bot command 'applypotion'.
Rule["RestrictApplyPotionToRogue"] = 0 --- Use `RuleB.Get(Rule.RestrictApplyPotionToRogue)`. Default true, Restricts the bot command 'applypotion' to rogue-usable potions (i.e., poisons).
Rule["OldRaceRezEffects"] = 0 --- Use `RuleB.Get(Rule.OldRaceRezEffects)`. Default false, Older clients had ID 757 for races with high starting STR, but it doesn't seem used anymore.
Rule["ResurrectionSickness"] = 0 --- Use `RuleB.Get(Rule.ResurrectionSickness)`. Default true, Use Resurrection Sickness based on Resurrection spell cast, set to false to disable Resurrection Sickness..
Rule["OldResurrectionSicknessSpell"] = 0 --- Use `RuleI.Get(Rule.OldResurrectionSicknessSpell)`. Default 757, 757 is Default Old Resurrection Sickness Spell.
Rule["ResurrectionSicknessSpell"] = 0 --- Use `RuleI.Get(Rule.ResurrectionSicknessSpell)`. Default 756, 756 is Default Resurrection Sickness Spell.
Rule["ServerWideOOC"] = 0 --- Use `RuleB.Get(Rule.ServerWideOOC)`. Default true, Enable server wide ooc-chat.
Rule["ServerWideAuction"] = 0 --- Use `RuleB.Get(Rule.ServerWideAuction)`. Default true, Enable server wide auction-chat.
Rule["EnableVoiceMacros"] = 0 --- Use `RuleB.Get(Rule.EnableVoiceMacros)`. Default true, Enable voice macros.
Rule["EnableMailKeyIPVerification"] = 0 --- Use `RuleB.Get(Rule.EnableMailKeyIPVerification)`. Default true, Setting whether the authenticity of the client should be verified via its IP address when accessing the InGame mailbox.
Rule["EnableAntiSpam"] = 0 --- Use `RuleB.Get(Rule.EnableAntiSpam)`. Default true, Enable anti-spam system for chat.
Rule["SuppressCommandErrors"] = 0 --- Use `RuleB.Get(Rule.SuppressCommandErrors)`. Default false, Do not suppress command errors by default.
Rule["MaxPermanentPlayerChannels"] = 0 --- Use `RuleI.Get(Rule.MaxPermanentPlayerChannels)`. Default 0, Maximum number of permanent chat channels a player can make. Default 0..
Rule["MinStatusToBypassAntiSpam"] = 0 --- Use `RuleI.Get(Rule.MinStatusToBypassAntiSpam)`. Default 100, Minimum status to bypass the anti-spam system.
Rule["MinimumMessagesPerInterval"] = 0 --- Use `RuleI.Get(Rule.MinimumMessagesPerInterval)`. Default 4, Minimum number of chat messages allowed per interval. The karma value is added to this value.
Rule["MaximumMessagesPerInterval"] = 0 --- Use `RuleI.Get(Rule.MaximumMessagesPerInterval)`. Default 12, Maximum value of chat messages allowed per interval.
Rule["MaxMessagesBeforeKick"] = 0 --- Use `RuleI.Get(Rule.MaxMessagesBeforeKick)`. Default 20, If an attempt is made to send more than the maximum allowed number of chat messages per interval, the client will be disconnected after this absolute number of messages.
Rule["IntervalDurationMS"] = 0 --- Use `RuleI.Get(Rule.IntervalDurationMS)`. Default 60000, Interval length in milliseconds.
Rule["KarmaUpdateIntervalMS"] = 0 --- Use `RuleI.Get(Rule.KarmaUpdateIntervalMS)`. Default 1200000, Karma update interval in milliseconds.
Rule["KarmaGlobalChatLimit"] = 0 --- Use `RuleI.Get(Rule.KarmaGlobalChatLimit)`. Default 72, Amount of karma you need to be able to talk in ooc/auction/chat below the level limit.
Rule["GlobalChatLevelLimit"] = 0 --- Use `RuleI.Get(Rule.GlobalChatLevelLimit)`. Default 8, Level limit you need to of reached to talk in ooc/auction/chat if your karma is too low.
Rule["AutoInjectSaylinksToSay"] = 0 --- Use `RuleB.Get(Rule.AutoInjectSaylinksToSay)`. Default true, Automatically injects saylinks into dialogue that has [brackets in them].
Rule["AutoInjectSaylinksToClientMessage"] = 0 --- Use `RuleB.Get(Rule.AutoInjectSaylinksToClientMessage)`. Default true, Automatically injects saylinks into dialogue that has [brackets in them].
Rule["QuestDialogueUsesDialogueWindow"] = 0 --- Use `RuleB.Get(Rule.QuestDialogueUsesDialogueWindow)`. Default false, Pipes all quest dialogue to dialogue window.
Rule["DialogueWindowAnimatesNPCsIfNoneSet"] = 0 --- Use `RuleB.Get(Rule.DialogueWindowAnimatesNPCsIfNoneSet)`. Default true, If there is no animation specified in the dialogue window markdown then it will choose a random greet animation such as wave or salute.
Rule["UsePriceMod"] = 0 --- Use `RuleB.Get(Rule.UsePriceMod)`. Default true, Use faction/charisma price modifiers.
Rule["SellCostMod"] = 0 --- Use `RuleR.Get(Rule.SellCostMod)`. Default 1, 05, Modifier for NPC sell price.
Rule["BuyCostMod"] = 0 --- Use `RuleR.Get(Rule.BuyCostMod)`. Default 0, 95, Modifier for NPC buy price.
Rule["PriceBonusPct"] = 0 --- Use `RuleI.Get(Rule.PriceBonusPct)`. Default 4, Determines maximum price bonus from having good faction/CHA. Value is a percent.
Rule["PricePenaltyPct"] = 0 --- Use `RuleI.Get(Rule.PricePenaltyPct)`. Default 4, Determines maximum price penalty from having bad faction/CHA. Value is a percent.
Rule["ChaBonusMod"] = 0 --- Use `RuleR.Get(Rule.ChaBonusMod)`. Default 3, 45, Determines CHA cap, from 104 CHA. 3.45 is 132 CHA at apprehensive. 0.34 is 400 CHA at apprehensive.
Rule["ChaPenaltyMod"] = 0 --- Use `RuleR.Get(Rule.ChaPenaltyMod)`. Default 1, 52, Determines CHA bottom, up to 102 CHA. 1.52 is 37 CHA at apprehensive. 0.98 is 0 CHA at apprehensive.
Rule["EnableAltCurrencySell"] = 0 --- Use `RuleB.Get(Rule.EnableAltCurrencySell)`. Default true, Enables the ability to resell items to alternate currency merchants.
Rule["AllowCorpse"] = 0 --- Use `RuleB.Get(Rule.AllowCorpse)`. Default false, Setting whether dealers leave a corpse behind .
Rule["AuditTrail"] = 0 --- Use `RuleB.Get(Rule.AuditTrail)`. Default false, Setting whether a path to the trader should be displayed in the bazaar.
Rule["MaxSearchResults"] = 0 --- Use `RuleI.Get(Rule.MaxSearchResults)`. Default 50, Maximum number of search results in Bazaar.
Rule["EnableWarpToTrader"] = 0 --- Use `RuleB.Get(Rule.EnableWarpToTrader)`. Default true, Setting whether teleport to the selected trader should be active.
Rule["MaxBarterSearchResults"] = 0 --- Use `RuleI.Get(Rule.MaxBarterSearchResults)`. Default 200, The maximum results returned in the /barter search.
Rule["EnableMailSystem"] = 0 --- Use `RuleB.Get(Rule.EnableMailSystem)`. Default true, Setting whether the mail system is activated. If false, client won't bring up the Mail window.
Rule["ExpireTrash"] = 0 --- Use `RuleI.Get(Rule.ExpireTrash)`. Default 0, Setting when the mail trash is emptied. Time in seconds. 0 will delete all messages in the trash when the mailserver starts.
Rule["ExpireRead"] = 0 --- Use `RuleI.Get(Rule.ExpireRead)`. Default 31536000, Setting when read mails expire. 31536000=1 Year. Set to -1 for never.
Rule["ExpireUnread"] = 0 --- Use `RuleI.Get(Rule.ExpireUnread)`. Default 31536000, Setting when unread mails expire. 31536000=1 Year. Set to -1 for never.
Rule["RequiredStatusAdmin"] = 0 --- Use `RuleI.Get(Rule.RequiredStatusAdmin)`. Default 251, Required status to administer chat channels.
Rule["RequiredStatusListAll"] = 0 --- Use `RuleI.Get(Rule.RequiredStatusListAll)`. Default 251, Required status to list all chat channels.
Rule["DeleteTimer"] = 0 --- Use `RuleI.Get(Rule.DeleteTimer)`. Default 1440, Empty password protected channels will be deleted after this many minutes.
Rule["RecordSellToMerchant"] = 0 --- Use `RuleB.Get(Rule.RecordSellToMerchant)`. Default false, Record sales from a player to an NPC merchant in eventlog table.
Rule["RecordBuyFromMerchant"] = 0 --- Use `RuleB.Get(Rule.RecordBuyFromMerchant)`. Default false, Record purchases by a player from an NPC merchant in eventlog table.
Rule["MinNumberForGroup"] = 0 --- Use `RuleI.Get(Rule.MinNumberForGroup)`. Default 2, Minimum members for adventure group.
Rule["MaxNumberForGroup"] = 0 --- Use `RuleI.Get(Rule.MaxNumberForGroup)`. Default 6, Maximum members for adventure group.
Rule["MaxLevelRange"] = 0 --- Use `RuleI.Get(Rule.MaxLevelRange)`. Default 9, Maximum level range for adventure.
Rule["NumberKillsForBossSpawn"] = 0 --- Use `RuleI.Get(Rule.NumberKillsForBossSpawn)`. Default 45, Number of adventure kills to make the boss spawn.
Rule["DistanceForRescueAccept"] = 0 --- Use `RuleR.Get(Rule.DistanceForRescueAccept)`. Default 10000, 0, Distance for adventure rescue accept.
Rule["DistanceForRescueComplete"] = 0 --- Use `RuleR.Get(Rule.DistanceForRescueComplete)`. Default 2500, 0, Distance for adventure rescue complete.
Rule["ItemIDToEnablePorts"] = 0 --- Use `RuleI.Get(Rule.ItemIDToEnablePorts)`. Default 41000, ItemID to enable adventure ports. 0 to disable, otherwise using a LDoN portal will require the user to have this item.
Rule["LDoNTrapDistanceUse"] = 0 --- Use `RuleI.Get(Rule.LDoNTrapDistanceUse)`. Default 625, LDoN trap distance use.
Rule["LDoNBaseTrapDifficulty"] = 0 --- Use `RuleR.Get(Rule.LDoNBaseTrapDifficulty)`. Default 15, 0, LDoN base trap difficulty.
Rule["LDoNCriticalFailTrapThreshold"] = 0 --- Use `RuleR.Get(Rule.LDoNCriticalFailTrapThreshold)`. Default 10, 0, LDoN critical fail trap threshold.
Rule["LDoNLootCountModifier"] = 0 --- Use `RuleI.Get(Rule.LDoNLootCountModifier)`. Default 10, LDoN Loot Count Modifier, lower is better (default is 10).
Rule["ExpPerPoint"] = 0 --- Use `RuleI.Get(Rule.ExpPerPoint)`. Default 23976503, Amount of experience per AA. Is the same as the amount of experience to go from level 51 to level 52.
Rule["NormalizedAAEnabled"] = 0 --- Use `RuleB.Get(Rule.NormalizedAAEnabled)`. Default false, TSS+ change to AA that normalizes AA experience to a fixed # of white con kills independent of level.
Rule["NormalizedAANumberOfWhiteConPerAA"] = 0 --- Use `RuleI.Get(Rule.NormalizedAANumberOfWhiteConPerAA)`. Default 25, The number of white con kills per AA point.
Rule["ModernAAScalingEnabled"] = 0 --- Use `RuleB.Get(Rule.ModernAAScalingEnabled)`. Default false, Are we linearly scaling AA experience based on total # of earned AA?.
Rule["ModernAAScalingStartPercent"] = 0 --- Use `RuleR.Get(Rule.ModernAAScalingStartPercent)`. Default 1000,  "1000% or 10x AA experience at the start of the scaling range").
Rule["ModernAAScalingAAMinimum"] = 0 --- Use `RuleI.Get(Rule.ModernAAScalingAAMinimum)`. Default 0, The minimum number of earned AA before AA experience scaling begins.
Rule["ModernAAScalingAALimit"] = 0 --- Use `RuleI.Get(Rule.ModernAAScalingAALimit)`. Default 4000, The number of earned AA when AA experience scaling ends.
Rule["SoundForAAEarned"] = 0 --- Use `RuleB.Get(Rule.SoundForAAEarned)`. Default false, Play sound when AA point earned.
Rule["UnusedAAPointCap"] = -0 --- Use `RuleI.Get(Rule.UnusedAAPointCap)`. Default 1, Cap for Unused AA Points.  Default: -1.  NOTE: DO NOT LOWER THIS WITHOUT KNOWING WHAT YOU ARE DOING. MAY RESULT IN PLAYERS LOSING AAs..
Rule["SessionTimeOut"] = 0 --- Use `RuleI.Get(Rule.SessionTimeOut)`. Default 600000, Amount of time in ms for the console session to time out.
Rule["ResendDelayBaseMS"] = 0 --- Use `RuleI.Get(Rule.ResendDelayBaseMS)`. Default 100, Base delay for resending data in EQStreamManager (milliseconds).
Rule["ResendDelayFactor"] = 0 --- Use `RuleR.Get(Rule.ResendDelayFactor)`. Default 1, 5, Multiplier for the base delay when resending data in EQStreamManager.
Rule["ResendDelayMinMS"] = 0 --- Use `RuleI.Get(Rule.ResendDelayMinMS)`. Default 300, Minimum timespan between two send retries (milliseconds).
Rule["ResendDelayMaxMS"] = 0 --- Use `RuleI.Get(Rule.ResendDelayMaxMS)`. Default 5000, Maximum timespan between two send retries (milliseconds).
Rule["ClientDataRate"] = 0 --- Use `RuleR.Get(Rule.ClientDataRate)`. Default 0, 0, KB / sec, 0.0 disabled.
Rule["CompressZoneStream"] = 0 --- Use `RuleB.Get(Rule.CompressZoneStream)`. Default true, Setting whether the zone stream should be compressed for transmission.
Rule["PlayerLogChat"] = 0 --- Use `RuleB.Get(Rule.PlayerLogChat)`. Default false, Log player chat.
Rule["PlayerLogTrades"] = 0 --- Use `RuleB.Get(Rule.PlayerLogTrades)`. Default false, Log player trades.
Rule["PlayerDropItems"] = 0 --- Use `RuleB.Get(Rule.PlayerDropItems)`. Default false, Log player dropping items.
Rule["PlayerLogHandins"] = 0 --- Use `RuleB.Get(Rule.PlayerLogHandins)`. Default false, Log player hand ins.
Rule["PlayerLogNPCKills"] = 0 --- Use `RuleB.Get(Rule.PlayerLogNPCKills)`. Default false, Log player NPC kills.
Rule["PlayerLogDeletes"] = 0 --- Use `RuleB.Get(Rule.PlayerLogDeletes)`. Default false, Log player deletes.
Rule["PlayerLogMoves"] = 0 --- Use `RuleB.Get(Rule.PlayerLogMoves)`. Default false, Log player moves.
Rule["PlayerLogMerchantTransactions"] = 0 --- Use `RuleB.Get(Rule.PlayerLogMerchantTransactions)`. Default false, Log merchant transactions.
Rule["PlayerLogZone"] = 0 --- Use `RuleB.Get(Rule.PlayerLogZone)`. Default false, Log player zone events.
Rule["PlayerLogDeaths"] = 0 --- Use `RuleB.Get(Rule.PlayerLogDeaths)`. Default false, Log player deaths.
Rule["PlayerLogConnectDisconnect"] = 0 --- Use `RuleB.Get(Rule.PlayerLogConnectDisconnect)`. Default false, Logs player connect/disconnect state.
Rule["PlayerLogLevels"] = 0 --- Use `RuleB.Get(Rule.PlayerLogLevels)`. Default false, Log player leveling/deleveling.
Rule["PlayerLogAARate"] = 0 --- Use `RuleB.Get(Rule.PlayerLogAARate)`. Default false, Log player AA experience rates.
Rule["PlayerLogQGlobalUpdate"] = 0 --- Use `RuleB.Get(Rule.PlayerLogQGlobalUpdate)`. Default false, Log player QGlobal updates.
Rule["PlayerLogTaskUpdates"] = 0 --- Use `RuleB.Get(Rule.PlayerLogTaskUpdates)`. Default false, Log player Task updates.
Rule["PlayerLogAAPurchases"] = 0 --- Use `RuleB.Get(Rule.PlayerLogAAPurchases)`. Default false, Log player AA purchases.
Rule["PlayerLogTradeSkillEvents"] = 0 --- Use `RuleB.Get(Rule.PlayerLogTradeSkillEvents)`. Default false, Log player tradeskill transactions.
Rule["PlayerLogIssuedCommandes"] = 0 --- Use `RuleB.Get(Rule.PlayerLogIssuedCommandes)`. Default false, Log player issued commands.
Rule["PlayerLogAlternateCurrencyTransactions"] = 0 --- Use `RuleB.Get(Rule.PlayerLogAlternateCurrencyTransactions)`. Default false, Log player alternate currency transactions.
Rule["EnforceAugmentRestriction"] = 0 --- Use `RuleB.Get(Rule.EnforceAugmentRestriction)`. Default true, Forces augment slot restrictions.
Rule["EnforceAugmentUsability"] = 0 --- Use `RuleB.Get(Rule.EnforceAugmentUsability)`. Default true, Forces augmented item usability.
Rule["EnforceAugmentWear"] = 0 --- Use `RuleB.Get(Rule.EnforceAugmentWear)`. Default true, Forces augment wear slot validation.
Rule["DeleteTransformationMold"] = 0 --- Use `RuleB.Get(Rule.DeleteTransformationMold)`. Default true, False if you want mold to last forever.
Rule["AllowAnyWeaponTransformation"] = 0 --- Use `RuleB.Get(Rule.AllowAnyWeaponTransformation)`. Default false, Weapons can use any weapon transformation.
Rule["TransformSummonedBags"] = 0 --- Use `RuleB.Get(Rule.TransformSummonedBags)`. Default false, Transforms summoned bags into disenchanted ones instead of deleting.
Rule["AllowMultipleOfSameAugment"] = 0 --- Use `RuleB.Get(Rule.AllowMultipleOfSameAugment)`. Default false, Allows multiple of the same augment to be placed in an item via #augmentitem or MQ2, set to true to allow.
Rule["UseLiveFactionMessage"] = 0 --- Use `RuleB.Get(Rule.UseLiveFactionMessage)`. Default false, Allows players to see detailed faction adjustments as on the live servers.
Rule["UseLiveBlockedMessage"] = 0 --- Use `RuleB.Get(Rule.UseLiveBlockedMessage)`. Default false, Setting whether detailed spell block messages should be used as on the live servers.
Rule["ReportingSystemActive"] = 0 --- Use `RuleB.Get(Rule.ReportingSystemActive)`. Default true, Activates bug reporting.
Rule["AllyFactionMinimum"] = 0 --- Use `RuleI.Get(Rule.AllyFactionMinimum)`. Default 1100, Minimum faction for ally.
Rule["WarmlyFactionMinimum"] = 0 --- Use `RuleI.Get(Rule.WarmlyFactionMinimum)`. Default 750, Minimum faction for warmly.
Rule["KindlyFactionMinimum"] = 0 --- Use `RuleI.Get(Rule.KindlyFactionMinimum)`. Default 500, Minimum faction for kindly.
Rule["AmiablyFactionMinimum"] = 0 --- Use `RuleI.Get(Rule.AmiablyFactionMinimum)`. Default 100, Minimum faction for amiably.
Rule["IndifferentlyFactionMinimum"] = 0 --- Use `RuleI.Get(Rule.IndifferentlyFactionMinimum)`. Default 0, Minimum faction for indifferently.
Rule["ApprehensivelyFactionMinimum"] = -0 --- Use `RuleI.Get(Rule.ApprehensivelyFactionMinimum)`. Default 100, Minimum faction for apprehensively.
Rule["DubiouslyFactionMinimum"] = -0 --- Use `RuleI.Get(Rule.DubiouslyFactionMinimum)`. Default 500, Minimum faction for dubiously.
Rule["ThreateninglyFactionMinimum"] = -0 --- Use `RuleI.Get(Rule.ThreateninglyFactionMinimum)`. Default 750, Minimum faction for threateningly.
Rule["PrintFileFunctionAndLine"] = 0 --- Use `RuleB.Get(Rule.PrintFileFunctionAndLine)`. Default false, Ex: [World Server] [net.cpp::main:309] Loading variables....
Rule["WorldGMSayLogging"] = 0 --- Use `RuleB.Get(Rule.WorldGMSayLogging)`. Default true, Relay worldserver logging to zone processes via GM say output.
Rule["QuestsRepopWithReload"] = 0 --- Use `RuleB.Get(Rule.QuestsRepopWithReload)`. Default true, When a hot reload is triggered, the zone will repop.
Rule["QuestsRepopWhenPlayersNotInCombat"] = 0 --- Use `RuleB.Get(Rule.QuestsRepopWhenPlayersNotInCombat)`. Default true, When a hot reload is triggered, the zone will repop when no clients are in combat.
Rule["QuestsResetTimersWithReload"] = 0 --- Use `RuleB.Get(Rule.QuestsResetTimersWithReload)`. Default true, When a hot reload is triggered, quest timers will be reset.
Rule["QuestsAutoReloadGlobalScripts"] = 0 --- Use `RuleB.Get(Rule.QuestsAutoReloadGlobalScripts)`. Default false, When a quest, plugin, or global script changes, auto reload..
Rule["CurrentExpansion"] = -0 --- Use `RuleI.Get(Rule.CurrentExpansion)`. Default 1, The current expansion enabled for the server [-1 = ALL, 0 = Classic, 1 = Kunark etc.].
Rule["UseCurrentExpansionAAOnly"] = 0 --- Use `RuleB.Get(Rule.UseCurrentExpansionAAOnly)`. Default false, When true will only load AA ranks that match CurrentExpansion rule.
Rule["ReservedInstances"] = 0 --- Use `RuleI.Get(Rule.ReservedInstances)`. Default 30, Number of instance IDs which are reserved for globals. This value should not be changed while a server is running.
Rule["RecycleInstanceIds"] = 0 --- Use `RuleB.Get(Rule.RecycleInstanceIds)`. Default true, Setting whether free instance IDs should be recycled to prevent them from gradually running out at 32k.
Rule["GuildHallExpirationDays"] = 0 --- Use `RuleI.Get(Rule.GuildHallExpirationDays)`. Default 90, Amount of days before a Guild Hall instance expires.
Rule["MinStatusToBypassPlayerCountRequirements"] = 0 --- Use `RuleI.Get(Rule.MinStatusToBypassPlayerCountRequirements)`. Default 80, Minimum GM status to bypass minimum player requirements for Expedition creation.
Rule["AlwaysNotifyNewLeaderOnChange"] = 0 --- Use `RuleB.Get(Rule.AlwaysNotifyNewLeaderOnChange)`. Default false, Always notify clients when made expedition leader. If false (live-like) new leaders are only notified when made leader via /dzmakeleader.
Rule["LockoutDurationMultiplier"] = 0 --- Use `RuleR.Get(Rule.LockoutDurationMultiplier)`. Default 1, 0, Multiplies lockout duration by this value when new lockouts are added.
Rule["ChooseLeaderCooldownTime"] = 0 --- Use `RuleI.Get(Rule.ChooseLeaderCooldownTime)`. Default 2000, Cooldown time (milliseconds) between choosing a new leader for automatic leader changes.
Rule["ClientRemovalDelayMS"] = 0 --- Use `RuleI.Get(Rule.ClientRemovalDelayMS)`. Default 60000, Delay (milliseconds) until a client is teleported out of dynamic zone after being removed as member.
Rule["EmptyShutdownEnabled"] = 0 --- Use `RuleB.Get(Rule.EmptyShutdownEnabled)`. Default true, Enable early instance shutdown for dynamic zones that have no members.
Rule["EmptyShutdownDelaySeconds"] = 0 --- Use `RuleI.Get(Rule.EmptyShutdownDelaySeconds)`. Default 1500, Seconds to set dynamic zone instance expiration if early shutdown enabled.
Rule["EnableInDynamicZoneStatus"] = 0 --- Use `RuleB.Get(Rule.EnableInDynamicZoneStatus)`. Default false, Enables the 'In Dynamic Zone' member status in dynamic zone window. If false (live-like) players inside the dynamic zone will show as 'Online'.
Rule["WorldProcessRate"] = 0 --- Use `RuleI.Get(Rule.WorldProcessRate)`. Default 6000, Timer interval (milliseconds) that systems check their dynamic zone states.
Rule["MQWarpDetectionDistanceFactor"] = 0 --- Use `RuleR.Get(Rule.MQWarpDetectionDistanceFactor)`. Default 9, 0, clients move at 4.4 about if in a straight line but with movement and to acct for lag we raise it a bit.
Rule["MQWarpExemptStatus"] = -0 --- Use `RuleI.Get(Rule.MQWarpExemptStatus)`. Default 1, Required status level to exempt the MQWarpDetector. Set to -1 to disable this feature..
Rule["MQZoneExemptStatus"] = -0 --- Use `RuleI.Get(Rule.MQZoneExemptStatus)`. Default 1, Required status level to exempt the MQZoneDetector. Set to -1 to disable this feature..
Rule["MQGateExemptStatus"] = -0 --- Use `RuleI.Get(Rule.MQGateExemptStatus)`. Default 1, Required status level to exempt the MQGateDetector. Set to -1 to disable this feature..
Rule["MQGhostExemptStatus"] = -0 --- Use `RuleI.Get(Rule.MQGhostExemptStatus)`. Default 1, Required status level to exempt the MQGhostDetector. Set to -1 to disable this feature..
Rule["MQFastMemExemptStatus"] = -0 --- Use `RuleI.Get(Rule.MQFastMemExemptStatus)`. Default 1, Required status level to exempt the MQFastMemDetector. Set to -1 to disable this feature..
Rule["EnableMQWarpDetector"] = 0 --- Use `RuleB.Get(Rule.EnableMQWarpDetector)`. Default true, Enable the MQWarp Detector. Set to False to disable this feature..
Rule["EnableMQZoneDetector"] = 0 --- Use `RuleB.Get(Rule.EnableMQZoneDetector)`. Default true, Enable the MQZone Detector. Set to False to disable this feature..
Rule["EnableMQGateDetector"] = 0 --- Use `RuleB.Get(Rule.EnableMQGateDetector)`. Default true, Enable the MQGate Detector. Set to False to disable this feature..
Rule["EnableMQGhostDetector"] = 0 --- Use `RuleB.Get(Rule.EnableMQGhostDetector)`. Default true, Enable the MQGhost Detector. Set to False to disable this feature..
Rule["EnableMQFastMemDetector"] = 0 --- Use `RuleB.Get(Rule.EnableMQFastMemDetector)`. Default true, Enable the MQFastMem Detector. Set to False to disable this feature..
Rule["MarkMQWarpLT"] = 0 --- Use `RuleB.Get(Rule.MarkMQWarpLT)`. Default false, Mark clients makeing smaller warps.
Rule["DyeCommandRequiresDyes"] = 0 --- Use `RuleB.Get(Rule.DyeCommandRequiresDyes)`. Default false, Enable this to require a Prismatic Dye (32557) each time someone uses #dye..
Rule["HideMeCommandDisablesTells"] = 0 --- Use `RuleB.Get(Rule.HideMeCommandDisablesTells)`. Default true, Disable this to allow tells to be received when using #hideme..
Rule["RequireKeyOnCursor"] = 0 --- Use `RuleB.Get(Rule.RequireKeyOnCursor)`. Default false, Enable this to require pre-keyring keys to be on player cursor to open doors..
Rule["DisableAttuneable"] = 0 --- Use `RuleB.Get(Rule.DisableAttuneable)`. Default false, Enable this to disable Attuneable Items.
Rule["DisableBardFocusEffects"] = 0 --- Use `RuleB.Get(Rule.DisableBardFocusEffects)`. Default false, Enable this to disable Bard Focus Effects on Items.
Rule["DisableLore"] = 0 --- Use `RuleB.Get(Rule.DisableLore)`. Default false, Enable this to disable Lore Items.
Rule["DisableNoDrop"] = 0 --- Use `RuleB.Get(Rule.DisableNoDrop)`. Default false, Enable this to disable No Drop Items.
Rule["DisableNoPet"] = 0 --- Use `RuleB.Get(Rule.DisableNoPet)`. Default false, Enable this to disable No Pet Items.
Rule["DisableNoRent"] = 0 --- Use `RuleB.Get(Rule.DisableNoRent)`. Default false, Enable this to disable No Rent Items.
Rule["DisableNoTransfer"] = 0 --- Use `RuleB.Get(Rule.DisableNoTransfer)`. Default false, Enable this to disable No Transfer Items.
Rule["DisablePotionBelt"] = 0 --- Use `RuleB.Get(Rule.DisablePotionBelt)`. Default false, Enable this to disable Potion Belt Items.
Rule["DisableSpellFocusEffects"] = 0 --- Use `RuleB.Get(Rule.DisableSpellFocusEffects)`. Default false, Enable this to disable Spell Focus Effects on Items.

---@class RuleI
RuleI = {}

---@param name number # index of rule
---@return number # value of returned rule converted to integer
function RuleI.Get(name) end

---@class RuleR
RuleR = {}

---@param name number # index of rule
---@return number # value of returned rule converted to real
function RuleR.Get(name) end

---@class RuleB
RuleB = {}

---@param name number # index of rule
---@return number # value of returned rule converted to boolean
function RuleB.Get(name) end